{
  "version": 3,
  "file": "ngx-mapbox-gl.umd.js",
  "sources": [
    "ng://ngx-mapbox-gl/src/app/lib/lib.module.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/video-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/vector-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/raster-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/image-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/geojson/draggable.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/geojson/feature.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/geojson/geojson-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/canvas-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/popup/popup.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/marker/marker.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/marker-cluster/marker-cluster.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/map/map.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/layer/layer.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/image/image.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/scale-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/navigation-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/geolocate-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/fullscreen-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/attribution-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/control.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/map/map.service.ts"
  ],
  "sourcesContent": [
    "import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { AttributionControlDirective } from './control/attribution-control.directive';\nimport { ControlComponent } from './control/control.component';\nimport { FullscreenControlDirective } from './control/fullscreen-control.directive';\nimport { GeolocateControlDirective } from './control/geolocate-control.directive';\nimport { NavigationControlDirective } from './control/navigation-control.directive';\nimport { ScaleControlDirective } from './control/scale-control.directive';\nimport { ImageComponent } from './image/image.component';\nimport { LayerComponent } from './layer/layer.component';\nimport { MapComponent } from './map/map.component';\nimport { MAPBOX_API_KEY } from './map/map.service';\nimport { MarkerClusterComponent, ClusterPointDirective, PointDirective } from './marker-cluster/marker-cluster.component';\nimport { MarkerComponent } from './marker/marker.component';\nimport { PopupComponent } from './popup/popup.component';\nimport { CanvasSourceComponent } from './source/canvas-source.component';\nimport { DraggableDirective } from './source/geojson/draggable.directive';\nimport { FeatureComponent } from './source/geojson/feature.component';\nimport { GeoJSONSourceComponent } from './source/geojson/geojson-source.component';\nimport { ImageSourceComponent } from './source/image-source.component';\nimport { RasterSourceComponent } from './source/raster-source.component';\nimport { VectorSourceComponent } from './source/vector-source.component';\nimport { VideoSourceComponent } from './source/video-source.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    MapComponent,\n    LayerComponent,\n    DraggableDirective,\n    ImageComponent,\n    VectorSourceComponent,\n    GeoJSONSourceComponent,\n    RasterSourceComponent,\n    ImageSourceComponent,\n    VideoSourceComponent,\n    CanvasSourceComponent,\n    FeatureComponent,\n    MarkerComponent,\n    PopupComponent,\n    ControlComponent,\n    FullscreenControlDirective,\n    NavigationControlDirective,\n    GeolocateControlDirective,\n    AttributionControlDirective,\n    ScaleControlDirective,\n    PointDirective,\n    ClusterPointDirective,\n    MarkerClusterComponent\n  ],\n  exports: [\n    MapComponent,\n    LayerComponent,\n    DraggableDirective,\n    ImageComponent,\n    VectorSourceComponent,\n    GeoJSONSourceComponent,\n    RasterSourceComponent,\n    ImageSourceComponent,\n    VideoSourceComponent,\n    CanvasSourceComponent,\n    FeatureComponent,\n    MarkerComponent,\n    PopupComponent,\n    ControlComponent,\n    FullscreenControlDirective,\n    NavigationControlDirective,\n    GeolocateControlDirective,\n    AttributionControlDirective,\n    ScaleControlDirective,\n    PointDirective,\n    ClusterPointDirective,\n    MarkerClusterComponent\n  ]\n})\nexport class NgxMapboxGLModule {\n  static forRoot(config: { accessToken: string }): ModuleWithProviders {\n    return {\n      ngModule: NgxMapboxGLModule,\n      providers: [\n        {\n          provide: MAPBOX_API_KEY,\n          useValue: config.accessToken\n        }\n      ],\n    };\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { VideoSourceOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-video-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoSourceComponent implements OnInit, OnDestroy, OnChanges, VideoSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() urls: string[];\n  @Input() coordinates: number[][];\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: 'video',\n        urls: this.urls,\n        coordinates: this.coordinates\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.urls && !changes.urls.isFirstChange() ||\n      changes.coordinates && !changes.coordinates.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { VectorSource } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-vector-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VectorSourceComponent implements OnInit, OnDestroy, OnChanges, VectorSource {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() url?: string;\n  @Input() tiles?: string[];\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n\n  type: 'vector' = 'vector'; // Just to make ts happy\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: this.type,\n        url: this.url,\n        tiles: this.tiles,\n        minzoom: this.minzoom,\n        maxzoom: this.maxzoom,\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.url && !changes.url.isFirstChange() ||\n      changes.tiles && !changes.tiles.isFirstChange() ||\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.maxzoom && !changes.maxzoom.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { RasterSource } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-raster-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RasterSourceComponent implements OnInit, OnDestroy, OnChanges, RasterSource {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() url: string;\n  @Input() tiles?: string[];\n  @Input() bounds?: number[];\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n  @Input() tileSize?: number;\n\n  type: 'raster' = 'raster'; // Just to make ts happy\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      const source = {\n        type: this.type,\n        url: this.url,\n        tiles: this.tiles,\n        bounds: this.bounds,\n        minzoom: this.minzoom,\n        maxzoom: this.maxzoom,\n        tileSize: this.tileSize\n      };\n      this.MapService.addSource(this.id, source);\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.url && !changes.url.isFirstChange() ||\n      changes.tiles && !changes.tiles.isFirstChange() ||\n      changes.bounds && !changes.bounds.isFirstChange() ||\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.maxzoom && !changes.maxzoom.isFirstChange() ||\n      changes.tileSize && !changes.tileSize.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ImageSourceOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-image-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ImageSourceComponent implements OnInit, OnDestroy, OnChanges, ImageSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() url: string;\n  @Input() coordinates: number[][];\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: 'image',\n        url: this.url,\n        coordinates: this.coordinates\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.url && !changes.url.isFirstChange() ||\n      changes.coordinates && !changes.coordinates.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { Directive, Host, Input, OnDestroy, OnInit, EventEmitter, Output, NgZone } from '@angular/core';\nimport { MapMouseEvent } from 'mapbox-gl';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { LayerComponent } from '../../layer/layer.component';\nimport { MapService } from '../../map/map.service';\nimport { FeatureComponent } from './feature.component';\n\n@Directive({\n  selector: '[mglDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('mglDraggable') source: LayerComponent;\n\n  @Output() dragStart = new EventEmitter<MapMouseEvent>();\n  @Output() dragEnd = new EventEmitter<MapMouseEvent>();\n  @Output() drag = new EventEmitter<MapMouseEvent>();\n\n  private destroyed$: ReplaySubject<void> = new ReplaySubject(1);\n\n  constructor(\n    private MapService: MapService,\n    @Host() private FeatureComponent: FeatureComponent,\n    private NgZone: NgZone\n  ) { }\n\n  ngOnInit() {\n    if (this.FeatureComponent.geometry.type !== 'Point') {\n      throw new Error('mglDraggable only support point feature');\n    }\n    this.MapService.mapCreated$.subscribe(() => {\n      this.source.mouseEnter.pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe((evt) => {\n        const feature: GeoJSON.Feature<any> = this.MapService.queryRenderedFeatures(\n          evt.point,\n          {\n            layers: [this.source.id],\n            filter: [\n              'all',\n              ['==', '$type', 'Point'],\n              ['==', '$id', this.FeatureComponent.id]\n            ]\n          }\n        )[0];\n        if (!feature) {\n          return;\n        }\n        this.MapService.changeCanvasCursor('move');\n        this.MapService.updateDragPan(false);\n\n        fromEvent(this.MapService.mapInstance, 'mousedown').pipe(\n          takeUntil(merge(this.destroyed$, this.source.mouseLeave))\n        ).subscribe(() => {\n          if (this.dragStart.observers.length) {\n            this.NgZone.run(() => this.dragStart.emit(evt));\n          }\n          fromEvent<MapMouseEvent>(this.MapService.mapInstance, 'mousemove').pipe(\n            takeUntil(merge(this.destroyed$, fromEvent(this.MapService.mapInstance, 'mouseup')))\n          ).subscribe(\n            (evt) => {\n              if (this.drag.observers.length) {\n                this.NgZone.run(() => this.drag.emit(evt));\n              }\n              this.FeatureComponent.updateCoordinates([evt.lngLat.lng, evt.lngLat.lat]);\n            },\n            (err) => err,\n            () => {\n              if (this.dragEnd.observers.length) {\n                this.NgZone.run(() => this.dragEnd.emit(evt));\n              }\n            }\n          );\n        });\n      });\n      this.source.mouseLeave.pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe(() => {\n        this.MapService.changeCanvasCursor('');\n        this.MapService.updateDragPan(true);\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(undefined);\n    this.destroyed$.complete();\n  }\n}\n",
    "import { Component, forwardRef, Inject, Input, OnDestroy, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { GeoJSONSourceComponent } from './geojson-source.component';\n\n@Component({\n  selector: 'mgl-feature',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FeatureComponent implements OnInit, OnDestroy, GeoJSON.Feature<GeoJSON.GeometryObject> {\n  /* Init inputs */\n  @Input() id?: number; // FIXME number only for now https://github.com/mapbox/mapbox-gl-js/issues/2716\n  @Input() geometry: GeoJSON.GeometryObject;\n  @Input() properties: any;\n  type: 'Feature' = 'Feature';\n\n  private feature: GeoJSON.Feature<GeoJSON.GeometryObject>;\n\n  constructor(\n    @Inject(forwardRef(() => GeoJSONSourceComponent)) private GeoJSONSourceComponent: GeoJSONSourceComponent\n  ) { }\n\n  ngOnInit() {\n    if (!this.id) {\n      this.id = this.GeoJSONSourceComponent.getNewFeatureId();\n    }\n    this.feature = {\n      type: this.type,\n      geometry: this.geometry,\n      properties: this.properties ? this.properties : {}\n    };\n    this.feature.id = this.id;\n    this.GeoJSONSourceComponent.addFeature(this.feature);\n  }\n\n  ngOnDestroy() {\n    this.GeoJSONSourceComponent.removeFeature(this.feature);\n  }\n\n  updateCoordinates(coordinates: number[]) {\n    (<GeoJSON.Point>this.feature.geometry).coordinates = coordinates;\n    this.GeoJSONSourceComponent.updateFeatureData.next();\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { GeoJSONSource, GeoJSONSourceOptions, GeoJSONGeometry } from 'mapbox-gl';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MapService } from '../../map/map.service';\n\n@Component({\n  selector: 'mgl-geojson-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeoJSONSourceComponent implements OnInit, OnDestroy, OnChanges, GeoJSONSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() data?: GeoJSON.Feature<GeoJSONGeometry> | GeoJSON.FeatureCollection<GeoJSONGeometry> | string;\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n  @Input() buffer?: number;\n  @Input() tolerance?: number;\n  @Input() cluster?: boolean;\n  @Input() clusterRadius?: number;\n  @Input() clusterMaxZoom?: number;\n\n  updateFeatureData = new Subject();\n\n  private sub: Subscription;\n  private sourceAdded = false;\n  private featureIdCounter = 0;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    if (!this.data) {\n      this.data = {\n        type: 'FeatureCollection',\n        features: []\n      };\n    }\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: 'geojson',\n        data: this.data,\n        maxzoom: this.maxzoom,\n        minzoom: this.minzoom,\n        buffer: this.buffer,\n        tolerance: this.tolerance,\n        cluster: this.cluster,\n        clusterRadius: this.clusterRadius,\n        clusterMaxZoom: this.clusterMaxZoom,\n      });\n      this.sub = this.updateFeatureData.pipe(\n        debounceTime(0)\n      ).subscribe(() => {\n        const source = this.MapService.getSource<GeoJSONSource>(this.id);\n        source.setData(this.data!);\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.maxzoom && !changes.maxzoom.isFirstChange() ||\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.buffer && !changes.buffer.isFirstChange() ||\n      changes.tolerance && !changes.tolerance.isFirstChange() ||\n      changes.cluster && !changes.cluster.isFirstChange() ||\n      changes.clusterRadius && !changes.clusterRadius.isFirstChange() ||\n      changes.clusterMaxZoom && !changes.clusterMaxZoom.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n    if (changes.data && !changes.data.isFirstChange()) {\n      const source = this.MapService.getSource<GeoJSONSource>(this.id);\n      source.setData(this.data!);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.sub.unsubscribe();\n      this.MapService.removeSource(this.id);\n    }\n  }\n\n  addFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>) {\n    const collection = <GeoJSON.FeatureCollection<GeoJSON.GeometryObject>>this.data;\n    collection.features.push(feature);\n    this.updateFeatureData.next();\n  }\n\n  removeFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>) {\n    const collection = <GeoJSON.FeatureCollection<GeoJSON.GeometryObject>>this.data;\n    const index = collection.features.indexOf(feature);\n    if (index > -1) {\n      collection.features.splice(index, 1);\n    }\n    this.updateFeatureData.next();\n  }\n\n  getNewFeatureId() {\n    return ++this.featureIdCounter;\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { CanvasSourceOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-canvas-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CanvasSourceComponent implements OnInit, OnDestroy, OnChanges, CanvasSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() coordinates: number[][];\n  @Input() canvas: string;\n  @Input() animate?: boolean;\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      const source = {\n        type: 'canvas',\n        coordinates: this.coordinates,\n        canvas: this.canvas,\n        animate: this.animate,\n      };\n      this.MapService.addSource(this.id, source);\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.coordinates && !changes.coordinates.isFirstChange() ||\n      changes.canvas && !changes.canvas.isFirstChange() ||\n      changes.animate && !changes.animate.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n  EventEmitter,\n  Output\n} from '@angular/core';\nimport { PointLike, Popup, LngLatLike } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { MarkerComponent } from '../marker/marker.component';\n\n@Component({\n  selector: 'mgl-popup',\n  template: '<div #content><ng-content></ng-content></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopupComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {\n  /* Init input */\n  @Input() closeButton?: boolean;\n  @Input() closeOnClick?: boolean;\n  @Input() anchor?: 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left';\n  @Input() offset?: number | PointLike | { [anchor: string]: [number, number] };\n\n  /* Dynamic input */\n  @Input() lngLat?: LngLatLike;\n  @Input() marker?: MarkerComponent;\n\n  @Output() close = new EventEmitter<void>();\n\n  @ViewChild('content') content: ElementRef;\n\n  popupInstance?: Popup;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    if (this.lngLat && this.marker) {\n      throw new Error('marker and lngLat input are mutually exclusive');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.lngLat && !changes.lngLat.isFirstChange()) {\n      this.MapService.removePopup(this.popupInstance!);\n      const popupInstanceTmp = this.createPopup();\n      this.MapService.addPopup(popupInstanceTmp);\n      this.popupInstance = popupInstanceTmp;\n    }\n    if (changes.marker && !changes.marker.isFirstChange()) {\n      const previousMarker: MarkerComponent = changes.marker.previousValue;\n      if (previousMarker.markerInstance) {\n        previousMarker.markerInstance.setPopup(undefined);\n      }\n      if (this.marker && this.marker.markerInstance) {\n        this.marker.markerInstance.setPopup(this.popupInstance);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this.popupInstance = this.createPopup();\n  }\n\n  ngOnDestroy() {\n    this.MapService.removePopup(this.popupInstance!);\n    this.popupInstance = undefined;\n  }\n\n  private createPopup() {\n    const options = {\n      closeButton: this.closeButton,\n      closeOnClick: this.closeOnClick,\n      anchor: this.anchor,\n      offset: this.offset\n    };\n    Object.keys(options)\n      .forEach((key) =>\n        (<any>options)[key] === undefined && delete (<any>options)[key]);\n    const popupInstance = new Popup(options);\n    popupInstance.once('close', () => {\n      this.close.emit();\n    });\n    popupInstance.setDOMContent(this.content.nativeElement);\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.lngLat) {\n        popupInstance.setLngLat(this.lngLat);\n        this.MapService.addPopup(popupInstance);\n      } else if (this.marker && this.marker.markerInstance) {\n        this.marker.markerInstance.setPopup(popupInstance);\n      }\n    });\n    return popupInstance;\n  }\n}\n",
    "import { LngLatLike, Marker, PointLike } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewChild,\n    AfterViewInit,\n    OnInit,\n    ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'mgl-marker',\n  template: '<div #content><ng-content></ng-content></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarkerComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {\n  /* Init input */\n  @Input() offset?: PointLike;\n\n  /* Dynamic input */\n  @Input() feature?: GeoJSON.Feature<GeoJSON.Point>;\n  @Input() lngLat?: LngLatLike;\n\n  @ViewChild('content') content: ElementRef;\n\n  markerInstance?: Marker;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    if (this.feature && this.lngLat) {\n      throw new Error('feature and lngLat input are mutually exclusive');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.lngLat && !changes.lngLat.isFirstChange()) {\n      this.markerInstance!.setLngLat(this.lngLat!);\n    }\n    if (changes.feature && !changes.feature.isFirstChange()) {\n      this.markerInstance!.setLngLat(this.feature!.geometry!.coordinates);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.markerInstance = new Marker(this.content.nativeElement, { offset: this.offset });\n    this.markerInstance.setLngLat(this.feature ? this.feature.geometry!.coordinates : this.lngLat!);\n    this.MapService.mapCreated$.subscribe(() => {\n      this.MapService.addMarker(this.markerInstance!);\n    });\n  }\n\n  ngOnDestroy() {\n    this.MapService.removeMarker(this.markerInstance!);\n    this.markerInstance = undefined;\n  }\n\n  togglePopup() {\n    this.markerInstance!.togglePopup();\n  }\n}\n",
    "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef\n} from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { startWith } from 'rxjs/operators/startWith';\nimport { Subscription } from 'rxjs/Subscription';\nimport supercluster, { Options as SuperclusterOptions, Supercluster } from 'supercluster';\nimport { MapService } from '../map/map.service';\n\n@Directive({ selector: 'ng-template[mglPoint]' })\nexport class PointDirective { }\n\n@Directive({ selector: 'ng-template[mglClusterPoint]' })\nexport class ClusterPointDirective { }\n\n@Component({\n  selector: 'mgl-marker-cluster',\n  template: `\n    <ng-container *ngFor=\"let feature of clusterPoints\">\n      <ng-container *ngIf=\"feature.properties.cluster; else point\">\n        <mgl-marker\n          [feature]=\"feature\"\n        >\n          <ng-container *ngTemplateOutlet=\"clusterPointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-container>\n      <ng-template #point>\n        <mgl-marker\n          [feature]=\"feature\"\n        >\n          <ng-container *ngTemplateOutlet=\"pointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-template>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MarkerClusterComponent implements OnChanges, OnDestroy, AfterContentInit, OnInit {\n  /* Init input */\n  @Input() radius?: number;\n  @Input() maxZoom?: number;\n  @Input() minZoom?: number;\n  @Input() extent?: number;\n  @Input() nodeSize?: number;\n  @Input() log?: boolean;\n  @Input() reduce?: (accumulated: any, props: any) => void;\n  @Input() initial?: () => any;\n  @Input() map?: (props: any) => any;\n\n  /* Dynamic input */\n  @Input() data: GeoJSON.FeatureCollection<GeoJSON.Point>;\n\n  @ContentChild(PointDirective, { read: TemplateRef }) pointTpl: TemplateRef<any>;\n  @ContentChild(ClusterPointDirective, { read: TemplateRef }) clusterPointTpl: TemplateRef<any>;\n\n  clusterPoints: GeoJSON.Feature<GeoJSON.Point>[];\n\n  private supercluster: Supercluster;\n  private sub = new Subscription();\n\n  constructor(\n    private MapService: MapService,\n    private ChangeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  ngOnInit() {\n    const options: SuperclusterOptions = {\n      radius: this.radius,\n      maxZoom: this.maxZoom,\n      minZoom: this.minZoom,\n      extent: this.extent,\n      nodeSize: this.nodeSize,\n      log: this.log,\n      reduce: this.reduce,\n      initial: this.initial,\n      map: this.map\n    };\n    Object.keys(options)\n      .forEach((key: string) => {\n        const tkey = <keyof SuperclusterOptions>key;\n        if (options[tkey] === undefined) {\n          delete options[tkey];\n        }\n      });\n    this.supercluster = supercluster(options);\n    this.supercluster.load(this.data.features);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.data && !changes.data.isFirstChange()) {\n      this.supercluster.load(this.data.features);\n    }\n  }\n\n  ngAfterContentInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      const mapMove$ = merge(\n        fromEvent(this.MapService.mapInstance, 'zoomChange'),\n        fromEvent(this.MapService.mapInstance, 'move')\n      );\n      const sub = mapMove$.pipe(\n        startWith<any>(undefined)\n      ).subscribe(() => this.updateCluster());\n      this.sub.add(sub);\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  private updateCluster() {\n    const bbox = this.MapService.getCurrentViewportBbox();\n    const currentZoom = Math.round(this.MapService.mapInstance.getZoom());\n    this.clusterPoints = this.supercluster.getClusters(bbox, currentZoom);\n    this.ChangeDetectorRef.detectChanges();\n    this.MapService.applyChanges();\n  }\n}\n",
    "import {\n  EventData,\n  FlyToOptions,\n  LngLatBoundsLike,\n  LngLatLike,\n  Map,\n  MapBoxZoomEvent,\n  MapMouseEvent,\n  MapTouchEvent,\n  PaddingOptions,\n  PointLike,\n  Style\n} from 'mapbox-gl';\nimport { MapService } from './map.service';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MapEvent } from './map.types';\n\ndeclare global {\n  namespace mapboxgl {\n    export interface MapboxOptions {\n      failIfMajorPerformanceCaveat?: boolean;\n      transformRequest?: Function;\n      localIdeographFontFamily?: string;\n      pitchWithRotate?: boolean;\n    }\n  }\n}\n\n@Component({\n  selector: 'mgl-map',\n  template: '<div #container></div>',\n  styles: [`\n  :host {\n    display: block;\n  }\n  div {\n    height: 100%;\n    width: 100%;\n  }\n  `],\n  providers: [\n    MapService\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MapComponent implements OnChanges, OnDestroy, AfterViewInit, MapEvent {\n  /* Init inputs */\n  @Input() accessToken?: string;\n  @Input() customMapboxApiUrl?: string;\n  @Input() hash?: boolean;\n  @Input() refreshExpiredTiles?: boolean;\n  @Input() failIfMajorPerformanceCaveat?: boolean;\n  @Input() classes?: string[];\n  @Input() bearingSnap?: number;\n  @Input() interactive?: boolean;\n  @Input() pitchWithRotate?: boolean;\n  @Input() attributionControl?: boolean;\n  @Input() logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  @Input() maxTileCacheSize?: number;\n  @Input() localIdeographFontFamily?: string;\n  @Input() preserveDrawingBuffer?: boolean;\n  @Input() renderWorldCopies?: boolean;\n  @Input() trackResize?: boolean;\n  @Input() transformRequest?: Function;\n\n  /* Dynamic inputs */\n  @Input() minZoom?: number;\n  @Input() maxZoom?: number;\n  @Input() scrollZoom?: boolean;\n  @Input() dragRotate?: boolean;\n  @Input() touchZoomRotate?: boolean;\n  @Input() doubleClickZoom?: boolean;\n  @Input() keyboard?: boolean;\n  @Input() dragPan?: boolean;\n  @Input() boxZoom?: boolean;\n  @Input() style: Style | string;\n  @Input() center?: LngLatLike;\n  @Input() maxBounds?: LngLatBoundsLike;\n  @Input() zoom?: [number];\n  @Input() bearing?: [number];\n  @Input() pitch?: [number];\n\n  /* Added by ngx-mapbox-gl */\n  @Input() movingMethod: 'jumpTo' | 'easeTo' | 'flyTo' = 'flyTo';\n  @Input() fitBounds?: LngLatBoundsLike;\n  @Input() fitBoundsOptions?: {\n    linear?: boolean,\n    easing?: Function,\n    padding?: number | PaddingOptions,\n    offset?: PointLike,\n    maxZoom?: number\n  };\n  @Input() flyToOptions?: FlyToOptions;\n  @Input() centerWithPanTo?: boolean;\n  @Input() cursorStyle?: string;\n\n  @Output() resize = new EventEmitter<void>();\n  @Output() remove = new EventEmitter<void>();\n  @Output() mouseDown = new EventEmitter<MapMouseEvent>();\n  @Output() mouseUp = new EventEmitter<MapMouseEvent>();\n  @Output() mouseMove = new EventEmitter<MapMouseEvent>();\n  @Output() click = new EventEmitter<MapMouseEvent>();\n  @Output() dblClick = new EventEmitter<MapMouseEvent>();\n  @Output() mouseEnter = new EventEmitter<MapMouseEvent>();\n  @Output() mouseLeave = new EventEmitter<MapMouseEvent>();\n  @Output() mouseOver = new EventEmitter<MapMouseEvent>();\n  @Output() mouseOut = new EventEmitter<MapMouseEvent>();\n  @Output() contextMenu = new EventEmitter<MapMouseEvent>();\n  @Output() touchStart = new EventEmitter<MapTouchEvent>();\n  @Output() touchEnd = new EventEmitter<MapTouchEvent>();\n  @Output() touchMove = new EventEmitter<MapTouchEvent>();\n  @Output() touchCancel = new EventEmitter<MapTouchEvent>();\n  @Output() moveStart = new EventEmitter<DragEvent>(); // TODO Check type\n  @Output() move = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() moveEnd = new EventEmitter<DragEvent>();\n  @Output() dragStart = new EventEmitter<DragEvent>();\n  @Output() drag = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() dragEnd = new EventEmitter<DragEvent>();\n  @Output() zoomStart = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() zoomEvt = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() zoomEnd = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() rotateStart = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() rotate = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() rotateEnd = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() pitchStart = new EventEmitter<EventData>();\n  @Output() pitchEvt = new EventEmitter<EventData>();\n  @Output() pitchEnd = new EventEmitter<EventData>();\n  @Output() boxZoomStart = new EventEmitter<MapBoxZoomEvent>();\n  @Output() boxZoomEnd = new EventEmitter<MapBoxZoomEvent>();\n  @Output() boxZoomCancel = new EventEmitter<MapBoxZoomEvent>();\n  @Output() webGlContextLost = new EventEmitter<void>();\n  @Output() webGlContextRestored = new EventEmitter<void>();\n  @Output() load = new EventEmitter<any>();\n  @Output() render = new EventEmitter<void>();\n  @Output() error = new EventEmitter<any>(); // TODO Check type\n  @Output() data = new EventEmitter<EventData>();\n  @Output() styleData = new EventEmitter<EventData>();\n  @Output() sourceData = new EventEmitter<EventData>();\n  @Output() dataLoading = new EventEmitter<EventData>();\n  @Output() styleDataLoading = new EventEmitter<EventData>();\n  @Output() sourceDataLoading = new EventEmitter<EventData>();\n\n  get mapInstance(): Map {\n    return this.MapService.mapInstance;\n  }\n\n  @ViewChild('container') mapContainer: ElementRef;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngAfterViewInit() {\n    this.MapService.setup({\n      accessToken: this.accessToken,\n      customMapboxApiUrl: this.customMapboxApiUrl,\n      mapOptions: {\n        container: this.mapContainer.nativeElement,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        style: this.style,\n        hash: this.hash,\n        interactive: this.interactive,\n        bearingSnap: this.bearingSnap,\n        pitchWithRotate: this.pitchWithRotate,\n        classes: this.classes,\n        attributionControl: this.attributionControl,\n        logoPosition: this.logoPosition,\n        failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,\n        preserveDrawingBuffer: this.preserveDrawingBuffer,\n        refreshExpiredTiles: this.refreshExpiredTiles,\n        maxBounds: this.maxBounds,\n        scrollZoom: this.scrollZoom,\n        boxZoom: this.boxZoom,\n        dragRotate: this.dragRotate,\n        dragPan: this.dragPan,\n        keyboard: this.keyboard,\n        doubleClickZoom: this.doubleClickZoom,\n        touchZoomRotate: this.touchZoomRotate,\n        trackResize: this.trackResize,\n        center: this.center,\n        zoom: this.zoom,\n        bearing: this.bearing,\n        pitch: this.pitch,\n        renderWorldCopies: this.renderWorldCopies,\n        maxTileCacheSize: this.maxTileCacheSize,\n        localIdeographFontFamily: this.localIdeographFontFamily,\n        transformRequest: this.transformRequest\n      },\n      mapEvents: this\n    });\n    if (this.cursorStyle) {\n      this.MapService.changeCanvasCursor(this.cursorStyle);\n    }\n  }\n\n  ngOnDestroy() {\n    this.MapService.destroyMap();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.cursorStyle && !changes.cursorStyle.isFirstChange()) {\n      this.MapService.changeCanvasCursor(changes.cursorStyle.currentValue);\n    }\n    if (changes.minZoom && !changes.minZoom.isFirstChange()) {\n      this.MapService.updateMinZoom(changes.minZoom.currentValue);\n    }\n    if (changes.maxZoom && !changes.maxZoom.isFirstChange()) {\n      this.MapService.updateMaxZoom(changes.maxZoom.currentValue);\n    }\n    if (changes.scrollZoom && !changes.scrollZoom.isFirstChange()) {\n      this.MapService.updateScrollZoom(changes.scrollZoom.currentValue);\n    }\n    if (changes.dragRotate && !changes.dragRotate.isFirstChange()) {\n      this.MapService.updateDragRotate(changes.dragRotate.currentValue);\n    }\n    if (changes.touchZoomRotate && !changes.touchZoomRotate.isFirstChange()) {\n      this.MapService.updateTouchZoomRotate(changes.touchZoomRotate.currentValue);\n    }\n    if (changes.doubleClickZoom && !changes.doubleClickZoom.isFirstChange()) {\n      this.MapService.updateDoubleClickZoom(changes.doubleClickZoom.currentValue);\n    }\n    if (changes.keyboard && !changes.keyboard.isFirstChange()) {\n      this.MapService.updateKeyboard(changes.keyboard.currentValue);\n    }\n    if (changes.dragPan && !changes.dragPan.isFirstChange()) {\n      this.MapService.updateDragPan(changes.dragPan.currentValue);\n    }\n    if (changes.boxZoom && !changes.boxZoom.isFirstChange()) {\n      this.MapService.updateBoxZoom(changes.boxZoom.currentValue);\n    }\n    if (changes.style && !changes.style.isFirstChange()) {\n      this.MapService.updateStyle(changes.style.currentValue);\n    }\n    if (changes.maxBounds && !changes.maxBounds.isFirstChange()) {\n      this.MapService.updateMaxBounds(changes.maxBounds.currentValue);\n    }\n    if (changes.fitBounds && !changes.fitBounds.isFirstChange()) {\n      this.MapService.fitBounds(changes.fitBounds.currentValue, this.fitBoundsOptions);\n    }\n    if (\n      this.centerWithPanTo &&\n      changes.center && !changes.center.isFirstChange() &&\n      !changes.zoom && !changes.bearing && !changes.pitch\n    ) {\n      this.MapService.panTo(this.center!);\n    } else if (\n      changes.center && !changes.center.isFirstChange() ||\n      changes.zoom && !changes.zoom.isFirstChange() ||\n      changes.bearing && !changes.bearing.isFirstChange() ||\n      changes.pitch && !changes.pitch.isFirstChange()\n    ) {\n      this.MapService.move(\n        this.movingMethod,\n        this.flyToOptions,\n        changes.zoom && this.zoom ? this.zoom[0] : undefined,\n        changes.center ? this.center : undefined,\n        changes.bearing && this.bearing ? this.bearing[0] : undefined,\n        changes.pitch && this.pitch ? this.pitch[0] : undefined\n      );\n    }\n  }\n}\n",
    "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  BackgroundLayout,\n  BackgroundPaint,\n  CircleLayout,\n  CirclePaint,\n  FillExtrusionLayout,\n  FillExtrusionPaint,\n  FillLayout,\n  FillPaint,\n  GeoJSONSource,\n  GeoJSONSourceRaw,\n  ImageSource,\n  Layer,\n  LineLayout,\n  LinePaint,\n  MapMouseEvent,\n  RasterLayout,\n  RasterPaint,\n  RasterSource,\n  SymbolLayout,\n  SymbolPaint,\n  VectorSource,\n  VideoSource\n} from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-layer',\n  template: ''\n})\nexport class LayerComponent implements OnInit, OnDestroy, OnChanges, Layer {\n  /* Init inputs */\n  @Input() id: string;\n  @Input() source?: string | VectorSource | RasterSource | GeoJSONSource | ImageSource | VideoSource | GeoJSONSourceRaw;\n  @Input() type: 'symbol' | 'fill' | 'line' | 'circle' | 'fill-extrusion' | 'raster' | 'background';\n  @Input() metadata?: any;\n  @Input() sourceLayer?: string;\n\n  /* Dynamic inputs */\n  @Input() filter?: any[];\n  @Input() layout?: BackgroundLayout | FillLayout | FillExtrusionLayout | LineLayout | SymbolLayout | RasterLayout | CircleLayout;\n  @Input() paint?: BackgroundPaint | FillPaint | FillExtrusionPaint | LinePaint | SymbolPaint | RasterPaint | CirclePaint;\n  @Input() before?: string;\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n\n  @Output() click = new EventEmitter<MapMouseEvent>();\n  @Output() mouseEnter = new EventEmitter<MapMouseEvent>();\n  @Output() mouseLeave = new EventEmitter<MapMouseEvent>();\n  @Output() mouseMove = new EventEmitter<MapMouseEvent>();\n\n  private layerAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addLayer({\n        layerOptions: {\n          id: this.id,\n          type: this.type,\n          source: this.source,\n          metadata: this.metadata,\n          'source-layer': this.sourceLayer,\n          minzoom: this.minzoom,\n          maxzoom: this.maxzoom,\n          filter: this.filter,\n          layout: this.layout,\n          paint: this.paint\n        },\n        layerEvents: {\n          click: this.click,\n          mouseEnter: this.mouseEnter,\n          mouseLeave: this.mouseLeave,\n          mouseMove: this.mouseMove\n        }\n      }, this.before);\n      this.layerAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.layerAdded) {\n      return;\n    }\n    if (changes.paint && !changes.paint.isFirstChange()) {\n      this.MapService.setAllLayerPaintProperty(this.id, changes.paint.currentValue!);\n    }\n    if (changes.layout && !changes.layout.isFirstChange()) {\n      this.MapService.setAllLayerLayoutProperty(this.id, changes.layout.currentValue!);\n    }\n    if (changes.filter && !changes.filter.isFirstChange()) {\n      this.MapService.setLayerFilter(this.id, changes.filter.currentValue!);\n    }\n    if (changes.before && !changes.before.isFirstChange()) {\n      this.MapService.setLayerBefore(this.id, changes.before.currentValue!);\n    }\n    if (\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.maxzoom && !changes.maxzoom.isFirstChange()\n    ) {\n      this.MapService.setLayerZoomRange(this.id, this.minzoom, this.maxzoom);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.layerAdded) {\n      this.MapService.removeLayer(this.id);\n    }\n  }\n}\n",
    "import {\n  Component,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { MapService } from '../map/map.service';\nimport { MapImageData, MapImageOptions } from '../map/map.types';\n\n@Component({\n  selector: 'mgl-image',\n  template: ''\n})\nexport class ImageComponent implements OnInit, OnDestroy, OnChanges {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() data?: MapImageData;\n  @Input() options?: MapImageOptions;\n  @Input() url?: string;\n\n  @Output() error = new EventEmitter<{ status: number }>();\n  @Output() loaded = new EventEmitter<void>();\n\n  private imageAdded = false;\n\n  constructor(\n    private MapService: MapService,\n    private zone: NgZone\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(async () => {\n      if (this.data) {\n        this.MapService.addImage(\n          this.id,\n          this.data,\n          this.options\n        );\n        this.imageAdded = true;\n      } else if (this.url) {\n        try {\n          await this.MapService.loadAndAddImage(\n            this.id,\n            this.url,\n            this.options\n          );\n          this.imageAdded = true;\n          this.zone.run(() => {\n            this.loaded.emit();\n          });\n        } catch (error) {\n          this.zone.run(() => {\n            this.error.emit(error);\n          });\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      changes.data && !changes.data.isFirstChange() ||\n      changes.options && !changes.options.isFirstChange() ||\n      changes.url && !changes.url.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.imageAdded) {\n      this.MapService.removeImage(this.id);\n    }\n  }\n}\n",
    "import { Directive, Host, Input, OnInit } from '@angular/core';\nimport { ScaleControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglScale]'\n})\nexport class ScaleControlDirective implements OnInit {\n  /* Init inputs */\n  @Input() maxWidth?: number;\n  @Input() unit?: 'imperial' | 'metric' | 'nautical';\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      const options: { maxWidth?: number, unit?: string } = {};\n      if (this.maxWidth !== undefined) {\n        options.maxWidth = this.maxWidth;\n      }\n      if (this.unit !== undefined) {\n        options.unit = this.unit;\n      }\n      this.ControlComponent.control = new ScaleControl(options);\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, OnInit, Host } from '@angular/core';\nimport { NavigationControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglNavigation]'\n})\nexport class NavigationControlDirective implements OnInit {\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      this.ControlComponent.control = new NavigationControl();\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, Host, Input, OnInit } from '@angular/core';\nimport { GeolocateControl, FitBoundsOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglGeolocate]'\n})\nexport class GeolocateControlDirective implements OnInit {\n  /* Init inputs */\n  @Input() positionOptions?: PositionOptions;\n  @Input() fitBoundsOptions?: FitBoundsOptions;\n  @Input() trackUserLocation?: boolean;\n  @Input() showUserLocation?: boolean;\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      const options = {\n        positionOptions: this.positionOptions,\n        fitBoundsOptions: this.fitBoundsOptions,\n        trackUserLocation: this.trackUserLocation,\n        showUserLocation: this.showUserLocation\n      };\n\n      Object.keys(options)\n        .forEach((key: string) => {\n          const tkey = <keyof typeof options>key;\n          if (options[tkey] === undefined) {\n            delete options[tkey];\n          }\n        });\n      this.ControlComponent.control = new GeolocateControl(options);\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, OnInit, Host } from '@angular/core';\nimport { FullscreenControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglFullscreen]'\n})\nexport class FullscreenControlDirective implements OnInit {\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      this.ControlComponent.control = new FullscreenControl();\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, Host, Input, OnInit } from '@angular/core';\nimport { AttributionControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglAttribution]'\n})\nexport class AttributionControlDirective implements OnInit {\n  /* Init inputs */\n  @Input() compact?: boolean;\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      const options: { compact?: boolean } = {};\n      if (this.compact !== undefined) {\n        options.compact = this.compact;\n      }\n      this.ControlComponent.control = new AttributionControl(options);\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Control, IControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\n\nexport class CustomControl implements IControl {\n  constructor(\n    private container: HTMLElement\n  ) {\n  }\n\n  onAdd() {\n    return this.container;\n  }\n\n  onRemove() {\n    return this.container.parentNode!.removeChild(this.container);\n  }\n\n  getDefaultPosition() {\n    return 'top-right';\n  }\n}\n\n@Component({\n  selector: 'mgl-control',\n  template: '<div class=\"mapboxgl-ctrl\" #content><ng-content></ng-content></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ControlComponent implements OnDestroy, AfterContentInit {\n  /* Init inputs */\n  @Input() position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n  @ViewChild('content') content: ElementRef;\n\n  control: Control | IControl;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngAfterContentInit() {\n    if (this.content.nativeElement.childNodes.length) {\n      this.control = new CustomControl(this.content.nativeElement);\n      this.MapService.mapCreated$.subscribe(() => {\n        this.MapService.addControl(this.control!, this.position);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.MapService.removeControl(this.control);\n  }\n}\n",
    "import { EventEmitter, Inject, Injectable, InjectionToken, NgZone, Optional } from '@angular/core';\nimport bbox from '@turf/bbox';\nimport { polygon } from '@turf/helpers';\nimport * as MapboxGl from 'mapbox-gl';\nimport { AsyncSubject } from 'rxjs/AsyncSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { first } from 'rxjs/operators/first';\nimport { BBox } from 'supercluster';\nimport { MapEvent, MapImageData, MapImageOptions } from './map.types';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const MAPBOX_API_KEY = new InjectionToken('MapboxApiKey');\n\nexport interface SetupMap {\n  accessToken?: string;\n  customMapboxApiUrl?: string;\n  mapOptions: any; // MapboxGl.MapboxOptions\n  mapEvents: MapEvent;\n}\n\nexport interface SetupLayer {\n  layerOptions: MapboxGl.Layer;\n  layerEvents: {\n    click: EventEmitter<MapboxGl.MapMouseEvent>;\n    mouseEnter: EventEmitter<MapboxGl.MapMouseEvent>;\n    mouseLeave: EventEmitter<MapboxGl.MapMouseEvent>;\n    mouseMove: EventEmitter<MapboxGl.MapMouseEvent>;\n  };\n}\n\nexport type AllSource = MapboxGl.VectorSource |\n  MapboxGl.RasterSource |\n  MapboxGl.GeoJSONSource |\n  MapboxGl.ImageSourceOptions |\n  MapboxGl.VideoSource |\n  MapboxGl.GeoJSONSourceRaw |\n  MapboxGl.CanvasSourceOptions;\n\n@Injectable()\nexport class MapService {\n  mapInstance: MapboxGl.Map;\n  mapCreated$: Observable<void>;\n  mapLoaded$: Observable<void>;\n  mapEvents: MapEvent;\n\n  private mapCreated = new AsyncSubject<void>();\n  private mapLoaded = new AsyncSubject<void>();\n  private layerIdsToRemove: string[] = [];\n  private sourceIdsToRemove: string[] = [];\n  private markersToRemove: MapboxGl.Marker[] = [];\n  private popupsToRemove: MapboxGl.Popup[] = [];\n  private imageIdsToRemove: string[] = [];\n  private subscription = new Subscription();\n\n  constructor(\n    private zone: NgZone,\n    @Optional() @Inject(MAPBOX_API_KEY) private readonly MAPBOX_API_KEY: string\n  ) {\n    this.mapCreated$ = this.mapCreated.asObservable();\n    this.mapLoaded$ = this.mapLoaded.asObservable();\n  }\n\n  setup(options: SetupMap) {\n    // Need onStable to wait for a potential @angular/route transition to end\n    this.zone.onStable.pipe(first()).subscribe(() => {\n      // Workaround rollup issue\n      this.assign(MapboxGl, 'accessToken', options.accessToken || this.MAPBOX_API_KEY);\n      if (options.customMapboxApiUrl) {\n        this.assign(MapboxGl, 'config.API_URL', options.customMapboxApiUrl);\n      }\n      this.createMap(options.mapOptions);\n      this.hookEvents(options.mapEvents);\n      this.mapEvents = options.mapEvents;\n      this.mapCreated.next(undefined);\n      this.mapCreated.complete();\n    });\n  }\n\n  destroyMap() {\n    this.subscription.unsubscribe();\n    this.mapInstance.remove();\n  }\n\n  updateMinZoom(minZoom: number) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setMinZoom(minZoom);\n    });\n  }\n\n  updateMaxZoom(maxZoom: number) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setMaxZoom(maxZoom);\n    });\n  }\n\n  updateScrollZoom(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.scrollZoom.enable() : this.mapInstance.scrollZoom.disable();\n    });\n  }\n\n  updateDragRotate(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.dragRotate.enable() : this.mapInstance.dragRotate.disable();\n    });\n  }\n\n  updateTouchZoomRotate(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.touchZoomRotate.enable() : this.mapInstance.touchZoomRotate.disable();\n    });\n  }\n\n  updateDoubleClickZoom(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.doubleClickZoom.enable() : this.mapInstance.doubleClickZoom.disable();\n    });\n  }\n\n  updateKeyboard(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.keyboard.enable() : this.mapInstance.keyboard.disable();\n    });\n  }\n\n  updateDragPan(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.dragPan.enable() : this.mapInstance.dragPan.disable();\n    });\n  }\n\n  updateBoxZoom(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.boxZoom.enable() : this.mapInstance.boxZoom.disable();\n    });\n  }\n\n  updateStyle(style: MapboxGl.Style) {\n    // TODO Probably not so simple, write demo/tests\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setStyle(style);\n    });\n  }\n\n  updateMaxBounds(maxBounds: MapboxGl.LngLatBoundsLike) {\n    // TODO Probably not so simple, write demo/tests\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setMaxBounds(maxBounds);\n    });\n  }\n\n  changeCanvasCursor(cursor: string) {\n    const canvas = this.mapInstance.getCanvasContainer();\n    canvas.style.cursor = cursor;\n  }\n\n  queryRenderedFeatures(\n    pointOrBox?: MapboxGl.PointLike | MapboxGl.PointLike[],\n    parameters?: { layers?: string[], filter?: any[] }\n  ): GeoJSON.Feature<GeoJSON.GeometryObject>[] {\n    return this.mapInstance.queryRenderedFeatures(pointOrBox, parameters);\n  }\n\n  panTo(center: MapboxGl.LngLatLike) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.panTo(center);\n    });\n  }\n\n  move(\n    movingMethod: 'jumpTo' | 'easeTo' | 'flyTo',\n    flyToOptions?: MapboxGl.FlyToOptions,\n    zoom?: number,\n    center?: MapboxGl.LngLatLike,\n    bearing?: number,\n    pitch?: number\n  ) {\n    return this.zone.runOutsideAngular(() => {\n      (<any>this.mapInstance[movingMethod])({\n        ...flyToOptions,\n        zoom: zoom ? zoom : this.mapInstance.getZoom(),\n        center: center ? center : this.mapInstance.getCenter(),\n        bearing: bearing ? bearing : this.mapInstance.getBearing(),\n        pitch: pitch ? pitch : this.mapInstance.getPitch()\n      });\n    });\n  }\n\n  addLayer(layer: SetupLayer, before?: string) {\n    this.zone.runOutsideAngular(() => {\n      Object.keys(layer.layerOptions)\n        .forEach((key: string) => {\n          const tkey = <keyof MapboxGl.Layer>key;\n          if (layer.layerOptions[tkey] === undefined) {\n            delete layer.layerOptions[tkey];\n          }\n        });\n      this.mapInstance.addLayer(layer.layerOptions, before);\n      if (layer.layerEvents.click.observers.length) {\n        this.mapInstance.on('click', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.click.emit(evt);\n          });\n        });\n      }\n      if (layer.layerEvents.mouseEnter.observers.length) {\n        this.mapInstance.on('mouseenter', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.mouseEnter.emit(evt);\n          });\n        });\n      }\n      if (layer.layerEvents.mouseLeave.observers.length) {\n        this.mapInstance.on('mouseleave', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.mouseLeave.emit(evt);\n          });\n        });\n      }\n      if (layer.layerEvents.mouseMove.observers.length) {\n        this.mapInstance.on('mousemove', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.mouseMove.emit(evt);\n          });\n        });\n      }\n    });\n  }\n\n  removeLayer(layerId: string) {\n    this.layerIdsToRemove.push(layerId);\n  }\n\n  addMarker(marker: MapboxGl.Marker) {\n    return this.zone.runOutsideAngular(() => {\n      marker.addTo(this.mapInstance);\n    });\n  }\n\n  removeMarker(marker: MapboxGl.Marker) {\n    this.markersToRemove.push(marker);\n  }\n\n  addPopup(popup: MapboxGl.Popup) {\n    return this.zone.runOutsideAngular(() => {\n      popup.addTo(this.mapInstance);\n    });\n  }\n\n  removePopup(popup: MapboxGl.Popup) {\n    this.popupsToRemove.push(popup);\n  }\n\n  addControl(control: MapboxGl.Control | MapboxGl.IControl, position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left') {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.addControl(<any>control, position);\n    });\n  }\n\n  removeControl(control: MapboxGl.Control | MapboxGl.IControl) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.removeControl(<any>control);\n    });\n  }\n\n  async loadAndAddImage(imageId: string, url: string, options?: MapImageOptions) {\n    return this.zone.runOutsideAngular(() => {\n      return new Promise((resolve, reject) => {\n        this.mapInstance.loadImage(url, (error: { status: number } | null, image: ImageData) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          this.addImage(imageId, image, options);\n          resolve();\n        });\n      });\n    });\n  }\n\n  addImage(imageId: string, data: MapImageData, options?: MapImageOptions) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.addImage(imageId, <any>data, options);\n    });\n  }\n\n  removeImage(imageId: string) {\n    this.imageIdsToRemove.push(imageId);\n  }\n\n  addSource(sourceId: string, source: AllSource) {\n    return this.zone.runOutsideAngular(() => {\n      Object.keys(source)\n        .forEach((key) =>\n          (<any>source)[key] === undefined && delete (<any>source)[key]);\n      this.mapInstance.addSource(sourceId, <any>source); // Typings issue\n    });\n  }\n\n  getSource<T>(sourceId: string) {\n    return <T><any>this.mapInstance.getSource(sourceId);\n  }\n\n  removeSource(sourceId: string) {\n    this.sourceIdsToRemove.push(sourceId);\n  }\n\n  setAllLayerPaintProperty(\n    layerId: string,\n    paint: MapboxGl.BackgroundPaint | MapboxGl.FillPaint | MapboxGl.FillExtrusionPaint | MapboxGl.LinePaint | MapboxGl.SymbolPaint | MapboxGl.RasterPaint | MapboxGl.CirclePaint\n  ) {\n    return this.zone.runOutsideAngular(() => {\n      Object.keys(paint).forEach((key) => {\n        // TODO Check for perf, setPaintProperty only on changed paint props maybe\n        this.mapInstance.setPaintProperty(layerId, key, (<any>paint)[key]);\n      });\n    });\n  }\n\n  setAllLayerLayoutProperty(\n    layerId: string,\n    layout: MapboxGl.BackgroundLayout | MapboxGl.FillLayout | MapboxGl.FillExtrusionLayout | MapboxGl.LineLayout | MapboxGl.SymbolLayout | MapboxGl.RasterLayout | MapboxGl.CircleLayout\n  ) {\n    return this.zone.runOutsideAngular(() => {\n      Object.keys(layout).forEach((key) => {\n        // TODO Check for perf, setPaintProperty only on changed paint props maybe\n        this.mapInstance.setLayoutProperty(layerId, key, (<any>layout)[key]);\n      });\n    });\n  }\n\n  setLayerFilter(layerId: string, filter: any[]) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setFilter(layerId, filter);\n    });\n  }\n\n  setLayerBefore(layerId: string, beforeId: string) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.moveLayer(layerId, beforeId);\n    });\n  }\n\n  setLayerZoomRange(layerId: string, minZoom?: number, maxZoom?: number) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setLayerZoomRange(layerId, minZoom ? minZoom : 0, maxZoom ? maxZoom : 20);\n    });\n  }\n\n  fitBounds(bounds: MapboxGl.LngLatBoundsLike, options?: any) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.fitBounds(bounds, options);\n    });\n  }\n\n  getCurrentViewportBbox(): BBox {\n    const canvas = this.mapInstance.getCanvas();\n    const w = canvas.width;\n    const h = canvas.height;\n    const upLeft = this.mapInstance.unproject([0, 0]).toArray();\n    const upRight = this.mapInstance.unproject([w, 0]).toArray();\n    const downRight = this.mapInstance.unproject([w, h]).toArray();\n    const downLeft = this.mapInstance.unproject([0, h]).toArray();\n    return bbox(polygon([[upLeft, upRight, downRight, downLeft, upLeft]]));\n  }\n\n  applyChanges() {\n    this.zone.runOutsideAngular(() => {\n      this.removeLayers();\n      this.removeSources();\n      this.removeMarkers();\n      this.removePopups();\n      this.removeImages();\n    });\n  }\n\n  private createMap(options: MapboxGl.MapboxOptions) {\n    NgZone.assertNotInAngularZone();\n    Object.keys(options)\n      .forEach((key: string) => {\n        const tkey = <keyof MapboxGl.MapboxOptions>key;\n        if (options[tkey] === undefined) {\n          delete options[tkey];\n        }\n      });\n    this.mapInstance = new MapboxGl.Map(options);\n    const sub = this.zone.onMicrotaskEmpty\n      .subscribe(() => this.applyChanges());\n    this.subscription.add(sub);\n  }\n\n  private removeLayers() {\n    for (const layerId of this.layerIdsToRemove) {\n      this.mapInstance.off('click', layerId);\n      this.mapInstance.off('mouseenter', layerId);\n      this.mapInstance.off('mouseleave', layerId);\n      this.mapInstance.off('mousemove', layerId);\n      this.mapInstance.removeLayer(layerId);\n    }\n    this.layerIdsToRemove = [];\n  }\n\n  private removeSources() {\n    for (const sourceId of this.sourceIdsToRemove) {\n      this.mapInstance.removeSource(sourceId);\n    }\n    this.sourceIdsToRemove = [];\n  }\n\n  private removeMarkers() {\n    for (const marker of this.markersToRemove) {\n      marker.remove();\n    }\n    this.markersToRemove = [];\n  }\n\n  private removePopups() {\n    for (const popup of this.popupsToRemove) {\n      popup.remove();\n    }\n    this.popupsToRemove = [];\n  }\n\n  private removeImages() {\n    for (const imageId of this.imageIdsToRemove) {\n      this.mapInstance.removeImage(imageId);\n    }\n    this.imageIdsToRemove = [];\n  }\n\n  private hookEvents(events: MapEvent) {\n    this.mapInstance.on('load', () => {\n      this.mapLoaded.next(undefined);\n      this.mapLoaded.complete();\n      this.zone.run(() => events.load.emit(this.mapInstance));\n    });\n    if (events.resize.observers.length) {\n      this.mapInstance.on('resize', () => this.zone.run(() => events.resize.emit()));\n    }\n    if (events.remove.observers.length) {\n      this.mapInstance.on('remove', () => this.zone.run(() => events.remove.emit()));\n    }\n    if (events.mouseDown.observers.length) {\n      this.mapInstance.on('mousedown', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseDown.emit(evt)));\n    }\n    if (events.mouseUp.observers.length) {\n      this.mapInstance.on('mouseup', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseUp.emit(evt)));\n    }\n    if (events.mouseMove.observers.length) {\n      this.mapInstance.on('mousemove', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseMove.emit(evt)));\n    }\n    if (events.click.observers.length) {\n      this.mapInstance.on('click', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.click.emit(evt)));\n    }\n    if (events.dblClick.observers.length) {\n      this.mapInstance.on('dblclick', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.dblClick.emit(evt)));\n    }\n    if (events.mouseEnter.observers.length) {\n      this.mapInstance.on('mouseenter', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseEnter.emit(evt)));\n    }\n    if (events.mouseLeave.observers.length) {\n      this.mapInstance.on('mouseleave', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseLeave.emit(evt)));\n    }\n    if (events.mouseOver.observers.length) {\n      this.mapInstance.on('mouseover', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseOver.emit(evt)));\n    }\n    if (events.mouseOut.observers.length) {\n      this.mapInstance.on('mouseout', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseOut.emit(evt)));\n    }\n    if (events.contextMenu.observers.length) {\n      this.mapInstance.on('contextmenu', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.contextMenu.emit(evt)));\n    }\n    if (events.touchStart.observers.length) {\n      this.mapInstance.on('touchstart', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchStart.emit(evt)));\n    }\n    if (events.touchEnd.observers.length) {\n      this.mapInstance.on('touchend', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchEnd.emit(evt)));\n    }\n    if (events.touchMove.observers.length) {\n      this.mapInstance.on('touchmove', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchMove.emit(evt)));\n    }\n    if (events.touchCancel.observers.length) {\n      this.mapInstance.on('touchcancel', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchCancel.emit(evt)));\n    }\n    if (events.moveStart.observers.length) {\n      this.mapInstance.on('movestart', (evt: DragEvent) => this.zone.run(() => events.moveStart.emit(evt)));\n    }\n    if (events.move.observers.length) {\n      this.mapInstance.on('move', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.move.emit(evt)));\n    }\n    if (events.moveEnd.observers.length) {\n      this.mapInstance.on('moveend', (evt: DragEvent) => this.zone.run(() => events.moveEnd.emit(evt)));\n    }\n    if (events.dragStart.observers.length) {\n      this.mapInstance.on('dragstart', (evt: DragEvent) => this.zone.run(() => events.dragStart.emit(evt)));\n    }\n    if (events.drag.observers.length) {\n      this.mapInstance.on('drag', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.drag.emit(evt)));\n    }\n    if (events.dragEnd.observers.length) {\n      this.mapInstance.on('dragend', (evt: DragEvent) => this.zone.run(() => events.dragEnd.emit(evt)));\n    }\n    if (events.zoomStart.observers.length) {\n      this.mapInstance.on('zoomstart', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.zoomStart.emit(evt)));\n    }\n    if (events.zoomEvt.observers.length) {\n      this.mapInstance.on('zoom', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.zoomEvt.emit(evt)));\n    }\n    if (events.zoomEnd.observers.length) {\n      this.mapInstance.on('zoomend', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.zoomEnd.emit(evt)));\n    }\n    if (events.rotateStart.observers.length) {\n      this.mapInstance.on('rotatestart', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.rotateStart.emit(evt)));\n    }\n    if (events.rotate.observers.length) {\n      this.mapInstance.on('rotate', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.rotate.emit(evt)));\n    }\n    if (events.rotateEnd.observers.length) {\n      this.mapInstance.on('rotateend', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.rotateEnd.emit(evt)));\n    }\n    if (events.pitchStart.observers.length) {\n      this.mapInstance.on('pitchstart', (evt: MapboxGl.EventData) => this.zone.run(() => events.pitchStart.emit(evt)));\n    }\n    if (events.pitchEvt.observers.length) {\n      this.mapInstance.on('pitch', (evt: MapboxGl.EventData) => this.zone.run(() => events.pitchEvt.emit(evt)));\n    }\n    if (events.pitchEnd.observers.length) {\n      this.mapInstance.on('pitchend', (evt: MapboxGl.EventData) => this.zone.run(() => events.pitchEnd.emit(evt)));\n    }\n    if (events.boxZoomStart.observers.length) {\n      this.mapInstance.on('boxzoomstart', (evt: MapboxGl.MapBoxZoomEvent) => this.zone.run(() => events.boxZoomStart.emit(evt)));\n    }\n    if (events.boxZoomEnd.observers.length) {\n      this.mapInstance.on('boxzoomend', (evt: MapboxGl.MapBoxZoomEvent) => this.zone.run(() => events.boxZoomEnd.emit(evt)));\n    }\n    if (events.boxZoomCancel.observers.length) {\n      this.mapInstance.on('boxzoomcancel', (evt: MapboxGl.MapBoxZoomEvent) => this.zone.run(() => events.boxZoomCancel.emit(evt)));\n    }\n    if (events.webGlContextLost.observers.length) {\n      this.mapInstance.on('webglcontextlost', () => this.zone.run(() => events.webGlContextLost.emit()));\n    }\n    if (events.webGlContextRestored.observers.length) {\n      this.mapInstance.on('webglcontextrestored', () => this.zone.run(() => events.webGlContextRestored.emit()));\n    }\n    if (events.render.observers.length) {\n      this.mapInstance.on('render', () => this.zone.run(() => events.render.emit()));\n    }\n    if (events.error.observers.length) {\n      this.mapInstance.on('error', () => this.zone.run(() => events.error.emit()));\n    }\n    if (events.data.observers.length) {\n      this.mapInstance.on('data', (evt: MapboxGl.EventData) => this.zone.run(() => events.data.emit(evt)));\n    }\n    if (events.styleData.observers.length) {\n      this.mapInstance.on('styledata', (evt: MapboxGl.EventData) => this.zone.run(() => events.styleData.emit(evt)));\n    }\n    if (events.sourceData.observers.length) {\n      this.mapInstance.on('sourcedata', (evt: MapboxGl.EventData) => this.zone.run(() => events.sourceData.emit(evt)));\n    }\n    if (events.dataLoading.observers.length) {\n      this.mapInstance.on('dataloading', (evt: MapboxGl.EventData) => this.zone.run(() => events.dataLoading.emit(evt)));\n    }\n    if (events.styleDataLoading.observers.length) {\n      this.mapInstance.on('styledataloading', (evt: MapboxGl.EventData) => this.zone.run(() => events.styleDataLoading.emit(evt)));\n    }\n    if (events.sourceDataLoading.observers.length) {\n      this.mapInstance.on('sourcedataloading', (evt: MapboxGl.EventData) => this.zone.run(() => events.sourceDataLoading.emit(evt)));\n    }\n  }\n\n  // TODO move this elsewhere\n  private assign(obj: any, prop: any, value: any) {\n    if (typeof prop === 'string') {\n      // tslint:disable-next-line:no-parameter-reassignment\n      prop = prop.split('.');\n    }\n    if (prop.length > 1) {\n      const e = prop.shift();\n      this.assign(obj[e] =\n        Object.prototype.toString.call(obj[e]) === '[object Object]'\n          ? obj[e]\n          : {},\n        prop,\n        value);\n    } else {\n      obj[prop[0]] = value;\n    }\n  }\n}\n"
  ],
  "names": [
    "Input",
    "ChangeDetectionStrategy",
    "Component",
    "MapService",
    "Output",
    "NgZone",
    "Host",
    "Directive",
    "takeUntil$1",
    "fromEvent$1",
    "merge$1",
    "ReplaySubject$1",
    "EventEmitter",
    "Inject",
    "forwardRef",
    "fromEvent",
    "FeatureComponent",
    "debounceTime$1",
    "Subject$1",
    "ViewChild",
    "Popup",
    "startWith$1",
    "Subscription$1",
    "merge",
    "ChangeDetectorRef",
    "__awaiter",
    "ScaleControl",
    "NavigationControl",
    "GeolocateControl",
    "FullscreenControl",
    "ControlComponent",
    "Map",
    "first$1",
    "AsyncSubject$1",
    "InjectionToken"
  ],
  "mappings": "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"
}
