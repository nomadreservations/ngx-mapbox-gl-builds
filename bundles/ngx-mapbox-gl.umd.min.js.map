{
  "version": 3,
  "file": "ngx-mapbox-gl.umd.min.js",
  "sources": [
    "ng://ngx-mapbox-gl/src/app/lib/map/map.service.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/attribution-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/control.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/fullscreen-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/geolocate-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/navigation-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/control/scale-control.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/image/image.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/layer/layer.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/map/map.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/marker-cluster/marker-cluster.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/marker/marker.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/popup/popup.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/canvas-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/geojson/geojson-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/geojson/feature.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/geojson/draggable.directive.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/image-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/raster-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/vector-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/source/video-source.component.ts",
    "ng://ngx-mapbox-gl/src/app/lib/lib.module.ts"
  ],
  "sourcesContent": [
    "import { EventEmitter, Inject, Injectable, InjectionToken, NgZone, Optional } from '@angular/core';\nimport bbox from '@turf/bbox';\nimport { polygon } from '@turf/helpers';\nimport * as MapboxGl from 'mapbox-gl';\nimport { AsyncSubject } from 'rxjs/AsyncSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { first } from 'rxjs/operators/first';\nimport { BBox } from 'supercluster';\nimport { MapEvent, MapImageData, MapImageOptions } from './map.types';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const MAPBOX_API_KEY = new InjectionToken('MapboxApiKey');\n\nexport interface SetupMap {\n  accessToken?: string;\n  customMapboxApiUrl?: string;\n  mapOptions: any; // MapboxGl.MapboxOptions\n  mapEvents: MapEvent;\n}\n\nexport interface SetupLayer {\n  layerOptions: MapboxGl.Layer;\n  layerEvents: {\n    click: EventEmitter<MapboxGl.MapMouseEvent>;\n    mouseEnter: EventEmitter<MapboxGl.MapMouseEvent>;\n    mouseLeave: EventEmitter<MapboxGl.MapMouseEvent>;\n    mouseMove: EventEmitter<MapboxGl.MapMouseEvent>;\n  };\n}\n\nexport type AllSource = MapboxGl.VectorSource |\n  MapboxGl.RasterSource |\n  MapboxGl.GeoJSONSource |\n  MapboxGl.ImageSourceOptions |\n  MapboxGl.VideoSource |\n  MapboxGl.GeoJSONSourceRaw |\n  MapboxGl.CanvasSourceOptions;\n\n@Injectable()\nexport class MapService {\n  mapInstance: MapboxGl.Map;\n  mapCreated$: Observable<void>;\n  mapLoaded$: Observable<void>;\n  mapEvents: MapEvent;\n\n  private mapCreated = new AsyncSubject<void>();\n  private mapLoaded = new AsyncSubject<void>();\n  private layerIdsToRemove: string[] = [];\n  private sourceIdsToRemove: string[] = [];\n  private markersToRemove: MapboxGl.Marker[] = [];\n  private popupsToRemove: MapboxGl.Popup[] = [];\n  private imageIdsToRemove: string[] = [];\n  private subscription = new Subscription();\n\n  constructor(\n    private zone: NgZone,\n    @Optional() @Inject(MAPBOX_API_KEY) private readonly MAPBOX_API_KEY: string\n  ) {\n    this.mapCreated$ = this.mapCreated.asObservable();\n    this.mapLoaded$ = this.mapLoaded.asObservable();\n  }\n\n  setup(options: SetupMap) {\n    // Need onStable to wait for a potential @angular/route transition to end\n    this.zone.onStable.pipe(first()).subscribe(() => {\n      // Workaround rollup issue\n      this.assign(MapboxGl, 'accessToken', options.accessToken || this.MAPBOX_API_KEY);\n      if (options.customMapboxApiUrl) {\n        this.assign(MapboxGl, 'config.API_URL', options.customMapboxApiUrl);\n      }\n      this.createMap(options.mapOptions);\n      this.hookEvents(options.mapEvents);\n      this.mapEvents = options.mapEvents;\n      this.mapCreated.next(undefined);\n      this.mapCreated.complete();\n    });\n  }\n\n  destroyMap() {\n    this.subscription.unsubscribe();\n    this.mapInstance.remove();\n  }\n\n  updateMinZoom(minZoom: number) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setMinZoom(minZoom);\n    });\n  }\n\n  updateMaxZoom(maxZoom: number) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setMaxZoom(maxZoom);\n    });\n  }\n\n  updateScrollZoom(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.scrollZoom.enable() : this.mapInstance.scrollZoom.disable();\n    });\n  }\n\n  updateDragRotate(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.dragRotate.enable() : this.mapInstance.dragRotate.disable();\n    });\n  }\n\n  updateTouchZoomRotate(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.touchZoomRotate.enable() : this.mapInstance.touchZoomRotate.disable();\n    });\n  }\n\n  updateDoubleClickZoom(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.doubleClickZoom.enable() : this.mapInstance.doubleClickZoom.disable();\n    });\n  }\n\n  updateKeyboard(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.keyboard.enable() : this.mapInstance.keyboard.disable();\n    });\n  }\n\n  updateDragPan(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.dragPan.enable() : this.mapInstance.dragPan.disable();\n    });\n  }\n\n  updateBoxZoom(status: boolean) {\n    return this.zone.runOutsideAngular(() => {\n      status ? this.mapInstance.boxZoom.enable() : this.mapInstance.boxZoom.disable();\n    });\n  }\n\n  updateStyle(style: MapboxGl.Style) {\n    // TODO Probably not so simple, write demo/tests\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setStyle(style);\n    });\n  }\n\n  updateMaxBounds(maxBounds: MapboxGl.LngLatBoundsLike) {\n    // TODO Probably not so simple, write demo/tests\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setMaxBounds(maxBounds);\n    });\n  }\n\n  changeCanvasCursor(cursor: string) {\n    const canvas = this.mapInstance.getCanvasContainer();\n    canvas.style.cursor = cursor;\n  }\n\n  queryRenderedFeatures(\n    pointOrBox?: MapboxGl.PointLike | MapboxGl.PointLike[],\n    parameters?: { layers?: string[], filter?: any[] }\n  ): GeoJSON.Feature<GeoJSON.GeometryObject>[] {\n    return this.mapInstance.queryRenderedFeatures(pointOrBox, parameters);\n  }\n\n  panTo(center: MapboxGl.LngLatLike) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.panTo(center);\n    });\n  }\n\n  move(\n    movingMethod: 'jumpTo' | 'easeTo' | 'flyTo',\n    flyToOptions?: MapboxGl.FlyToOptions,\n    zoom?: number,\n    center?: MapboxGl.LngLatLike,\n    bearing?: number,\n    pitch?: number\n  ) {\n    return this.zone.runOutsideAngular(() => {\n      (<any>this.mapInstance[movingMethod])({\n        ...flyToOptions,\n        zoom: zoom ? zoom : this.mapInstance.getZoom(),\n        center: center ? center : this.mapInstance.getCenter(),\n        bearing: bearing ? bearing : this.mapInstance.getBearing(),\n        pitch: pitch ? pitch : this.mapInstance.getPitch()\n      });\n    });\n  }\n\n  addLayer(layer: SetupLayer, before?: string) {\n    this.zone.runOutsideAngular(() => {\n      Object.keys(layer.layerOptions)\n        .forEach((key: string) => {\n          const tkey = <keyof MapboxGl.Layer>key;\n          if (layer.layerOptions[tkey] === undefined) {\n            delete layer.layerOptions[tkey];\n          }\n        });\n      this.mapInstance.addLayer(layer.layerOptions, before);\n      if (layer.layerEvents.click.observers.length) {\n        this.mapInstance.on('click', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.click.emit(evt);\n          });\n        });\n      }\n      if (layer.layerEvents.mouseEnter.observers.length) {\n        this.mapInstance.on('mouseenter', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.mouseEnter.emit(evt);\n          });\n        });\n      }\n      if (layer.layerEvents.mouseLeave.observers.length) {\n        this.mapInstance.on('mouseleave', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.mouseLeave.emit(evt);\n          });\n        });\n      }\n      if (layer.layerEvents.mouseMove.observers.length) {\n        this.mapInstance.on('mousemove', layer.layerOptions.id, (evt: MapboxGl.MapMouseEvent) => {\n          this.zone.run(() => {\n            layer.layerEvents.mouseMove.emit(evt);\n          });\n        });\n      }\n    });\n  }\n\n  removeLayer(layerId: string) {\n    this.layerIdsToRemove.push(layerId);\n  }\n\n  addMarker(marker: MapboxGl.Marker) {\n    return this.zone.runOutsideAngular(() => {\n      marker.addTo(this.mapInstance);\n    });\n  }\n\n  removeMarker(marker: MapboxGl.Marker) {\n    this.markersToRemove.push(marker);\n  }\n\n  addPopup(popup: MapboxGl.Popup) {\n    return this.zone.runOutsideAngular(() => {\n      popup.addTo(this.mapInstance);\n    });\n  }\n\n  removePopup(popup: MapboxGl.Popup) {\n    this.popupsToRemove.push(popup);\n  }\n\n  addControl(control: MapboxGl.Control | MapboxGl.IControl, position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left') {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.addControl(<any>control, position);\n    });\n  }\n\n  removeControl(control: MapboxGl.Control | MapboxGl.IControl) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.removeControl(<any>control);\n    });\n  }\n\n  async loadAndAddImage(imageId: string, url: string, options?: MapImageOptions) {\n    return this.zone.runOutsideAngular(() => {\n      return new Promise((resolve, reject) => {\n        this.mapInstance.loadImage(url, (error: { status: number } | null, image: ImageData) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          this.addImage(imageId, image, options);\n          resolve();\n        });\n      });\n    });\n  }\n\n  addImage(imageId: string, data: MapImageData, options?: MapImageOptions) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.addImage(imageId, <any>data, options);\n    });\n  }\n\n  removeImage(imageId: string) {\n    this.imageIdsToRemove.push(imageId);\n  }\n\n  addSource(sourceId: string, source: AllSource) {\n    return this.zone.runOutsideAngular(() => {\n      Object.keys(source)\n        .forEach((key) =>\n          (<any>source)[key] === undefined && delete (<any>source)[key]);\n      this.mapInstance.addSource(sourceId, <any>source); // Typings issue\n    });\n  }\n\n  getSource<T>(sourceId: string) {\n    return <T><any>this.mapInstance.getSource(sourceId);\n  }\n\n  removeSource(sourceId: string) {\n    this.sourceIdsToRemove.push(sourceId);\n  }\n\n  setAllLayerPaintProperty(\n    layerId: string,\n    paint: MapboxGl.BackgroundPaint | MapboxGl.FillPaint | MapboxGl.FillExtrusionPaint | MapboxGl.LinePaint | MapboxGl.SymbolPaint | MapboxGl.RasterPaint | MapboxGl.CirclePaint\n  ) {\n    return this.zone.runOutsideAngular(() => {\n      Object.keys(paint).forEach((key) => {\n        // TODO Check for perf, setPaintProperty only on changed paint props maybe\n        this.mapInstance.setPaintProperty(layerId, key, (<any>paint)[key]);\n      });\n    });\n  }\n\n  setAllLayerLayoutProperty(\n    layerId: string,\n    layout: MapboxGl.BackgroundLayout | MapboxGl.FillLayout | MapboxGl.FillExtrusionLayout | MapboxGl.LineLayout | MapboxGl.SymbolLayout | MapboxGl.RasterLayout | MapboxGl.CircleLayout\n  ) {\n    return this.zone.runOutsideAngular(() => {\n      Object.keys(layout).forEach((key) => {\n        // TODO Check for perf, setPaintProperty only on changed paint props maybe\n        this.mapInstance.setLayoutProperty(layerId, key, (<any>layout)[key]);\n      });\n    });\n  }\n\n  setLayerFilter(layerId: string, filter: any[]) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setFilter(layerId, filter);\n    });\n  }\n\n  setLayerBefore(layerId: string, beforeId: string) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.moveLayer(layerId, beforeId);\n    });\n  }\n\n  setLayerZoomRange(layerId: string, minZoom?: number, maxZoom?: number) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.setLayerZoomRange(layerId, minZoom ? minZoom : 0, maxZoom ? maxZoom : 20);\n    });\n  }\n\n  fitBounds(bounds: MapboxGl.LngLatBoundsLike, options?: any) {\n    return this.zone.runOutsideAngular(() => {\n      this.mapInstance.fitBounds(bounds, options);\n    });\n  }\n\n  getCurrentViewportBbox(): BBox {\n    const canvas = this.mapInstance.getCanvas();\n    const w = canvas.width;\n    const h = canvas.height;\n    const upLeft = this.mapInstance.unproject([0, 0]).toArray();\n    const upRight = this.mapInstance.unproject([w, 0]).toArray();\n    const downRight = this.mapInstance.unproject([w, h]).toArray();\n    const downLeft = this.mapInstance.unproject([0, h]).toArray();\n    return bbox(polygon([[upLeft, upRight, downRight, downLeft, upLeft]]));\n  }\n\n  applyChanges() {\n    this.zone.runOutsideAngular(() => {\n      this.removeLayers();\n      this.removeSources();\n      this.removeMarkers();\n      this.removePopups();\n      this.removeImages();\n    });\n  }\n\n  private createMap(options: MapboxGl.MapboxOptions) {\n    NgZone.assertNotInAngularZone();\n    Object.keys(options)\n      .forEach((key: string) => {\n        const tkey = <keyof MapboxGl.MapboxOptions>key;\n        if (options[tkey] === undefined) {\n          delete options[tkey];\n        }\n      });\n    this.mapInstance = new MapboxGl.Map(options);\n    const sub = this.zone.onMicrotaskEmpty\n      .subscribe(() => this.applyChanges());\n    this.subscription.add(sub);\n  }\n\n  private removeLayers() {\n    for (const layerId of this.layerIdsToRemove) {\n      this.mapInstance.off('click', layerId);\n      this.mapInstance.off('mouseenter', layerId);\n      this.mapInstance.off('mouseleave', layerId);\n      this.mapInstance.off('mousemove', layerId);\n      this.mapInstance.removeLayer(layerId);\n    }\n    this.layerIdsToRemove = [];\n  }\n\n  private removeSources() {\n    for (const sourceId of this.sourceIdsToRemove) {\n      this.mapInstance.removeSource(sourceId);\n    }\n    this.sourceIdsToRemove = [];\n  }\n\n  private removeMarkers() {\n    for (const marker of this.markersToRemove) {\n      marker.remove();\n    }\n    this.markersToRemove = [];\n  }\n\n  private removePopups() {\n    for (const popup of this.popupsToRemove) {\n      popup.remove();\n    }\n    this.popupsToRemove = [];\n  }\n\n  private removeImages() {\n    for (const imageId of this.imageIdsToRemove) {\n      this.mapInstance.removeImage(imageId);\n    }\n    this.imageIdsToRemove = [];\n  }\n\n  private hookEvents(events: MapEvent) {\n    this.mapInstance.on('load', () => {\n      this.mapLoaded.next(undefined);\n      this.mapLoaded.complete();\n      this.zone.run(() => events.load.emit(this.mapInstance));\n    });\n    if (events.resize.observers.length) {\n      this.mapInstance.on('resize', () => this.zone.run(() => events.resize.emit()));\n    }\n    if (events.remove.observers.length) {\n      this.mapInstance.on('remove', () => this.zone.run(() => events.remove.emit()));\n    }\n    if (events.mouseDown.observers.length) {\n      this.mapInstance.on('mousedown', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseDown.emit(evt)));\n    }\n    if (events.mouseUp.observers.length) {\n      this.mapInstance.on('mouseup', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseUp.emit(evt)));\n    }\n    if (events.mouseMove.observers.length) {\n      this.mapInstance.on('mousemove', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseMove.emit(evt)));\n    }\n    if (events.click.observers.length) {\n      this.mapInstance.on('click', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.click.emit(evt)));\n    }\n    if (events.dblClick.observers.length) {\n      this.mapInstance.on('dblclick', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.dblClick.emit(evt)));\n    }\n    if (events.mouseEnter.observers.length) {\n      this.mapInstance.on('mouseenter', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseEnter.emit(evt)));\n    }\n    if (events.mouseLeave.observers.length) {\n      this.mapInstance.on('mouseleave', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseLeave.emit(evt)));\n    }\n    if (events.mouseOver.observers.length) {\n      this.mapInstance.on('mouseover', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseOver.emit(evt)));\n    }\n    if (events.mouseOut.observers.length) {\n      this.mapInstance.on('mouseout', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.mouseOut.emit(evt)));\n    }\n    if (events.contextMenu.observers.length) {\n      this.mapInstance.on('contextmenu', (evt: MapboxGl.MapMouseEvent) => this.zone.run(() => events.contextMenu.emit(evt)));\n    }\n    if (events.touchStart.observers.length) {\n      this.mapInstance.on('touchstart', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchStart.emit(evt)));\n    }\n    if (events.touchEnd.observers.length) {\n      this.mapInstance.on('touchend', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchEnd.emit(evt)));\n    }\n    if (events.touchMove.observers.length) {\n      this.mapInstance.on('touchmove', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchMove.emit(evt)));\n    }\n    if (events.touchCancel.observers.length) {\n      this.mapInstance.on('touchcancel', (evt: MapboxGl.MapTouchEvent) => this.zone.run(() => events.touchCancel.emit(evt)));\n    }\n    if (events.moveStart.observers.length) {\n      this.mapInstance.on('movestart', (evt: DragEvent) => this.zone.run(() => events.moveStart.emit(evt)));\n    }\n    if (events.move.observers.length) {\n      this.mapInstance.on('move', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.move.emit(evt)));\n    }\n    if (events.moveEnd.observers.length) {\n      this.mapInstance.on('moveend', (evt: DragEvent) => this.zone.run(() => events.moveEnd.emit(evt)));\n    }\n    if (events.dragStart.observers.length) {\n      this.mapInstance.on('dragstart', (evt: DragEvent) => this.zone.run(() => events.dragStart.emit(evt)));\n    }\n    if (events.drag.observers.length) {\n      this.mapInstance.on('drag', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.drag.emit(evt)));\n    }\n    if (events.dragEnd.observers.length) {\n      this.mapInstance.on('dragend', (evt: DragEvent) => this.zone.run(() => events.dragEnd.emit(evt)));\n    }\n    if (events.zoomStart.observers.length) {\n      this.mapInstance.on('zoomstart', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.zoomStart.emit(evt)));\n    }\n    if (events.zoomEvt.observers.length) {\n      this.mapInstance.on('zoom', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.zoomEvt.emit(evt)));\n    }\n    if (events.zoomEnd.observers.length) {\n      this.mapInstance.on('zoomend', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.zoomEnd.emit(evt)));\n    }\n    if (events.rotateStart.observers.length) {\n      this.mapInstance.on('rotatestart', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.rotateStart.emit(evt)));\n    }\n    if (events.rotate.observers.length) {\n      this.mapInstance.on('rotate', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.rotate.emit(evt)));\n    }\n    if (events.rotateEnd.observers.length) {\n      this.mapInstance.on('rotateend', (evt: MapboxGl.MapTouchEvent | MapboxGl.MapMouseEvent) => this.zone.run(() => events.rotateEnd.emit(evt)));\n    }\n    if (events.pitchStart.observers.length) {\n      this.mapInstance.on('pitchstart', (evt: MapboxGl.EventData) => this.zone.run(() => events.pitchStart.emit(evt)));\n    }\n    if (events.pitchEvt.observers.length) {\n      this.mapInstance.on('pitch', (evt: MapboxGl.EventData) => this.zone.run(() => events.pitchEvt.emit(evt)));\n    }\n    if (events.pitchEnd.observers.length) {\n      this.mapInstance.on('pitchend', (evt: MapboxGl.EventData) => this.zone.run(() => events.pitchEnd.emit(evt)));\n    }\n    if (events.boxZoomStart.observers.length) {\n      this.mapInstance.on('boxzoomstart', (evt: MapboxGl.MapBoxZoomEvent) => this.zone.run(() => events.boxZoomStart.emit(evt)));\n    }\n    if (events.boxZoomEnd.observers.length) {\n      this.mapInstance.on('boxzoomend', (evt: MapboxGl.MapBoxZoomEvent) => this.zone.run(() => events.boxZoomEnd.emit(evt)));\n    }\n    if (events.boxZoomCancel.observers.length) {\n      this.mapInstance.on('boxzoomcancel', (evt: MapboxGl.MapBoxZoomEvent) => this.zone.run(() => events.boxZoomCancel.emit(evt)));\n    }\n    if (events.webGlContextLost.observers.length) {\n      this.mapInstance.on('webglcontextlost', () => this.zone.run(() => events.webGlContextLost.emit()));\n    }\n    if (events.webGlContextRestored.observers.length) {\n      this.mapInstance.on('webglcontextrestored', () => this.zone.run(() => events.webGlContextRestored.emit()));\n    }\n    if (events.render.observers.length) {\n      this.mapInstance.on('render', () => this.zone.run(() => events.render.emit()));\n    }\n    if (events.error.observers.length) {\n      this.mapInstance.on('error', () => this.zone.run(() => events.error.emit()));\n    }\n    if (events.data.observers.length) {\n      this.mapInstance.on('data', (evt: MapboxGl.EventData) => this.zone.run(() => events.data.emit(evt)));\n    }\n    if (events.styleData.observers.length) {\n      this.mapInstance.on('styledata', (evt: MapboxGl.EventData) => this.zone.run(() => events.styleData.emit(evt)));\n    }\n    if (events.sourceData.observers.length) {\n      this.mapInstance.on('sourcedata', (evt: MapboxGl.EventData) => this.zone.run(() => events.sourceData.emit(evt)));\n    }\n    if (events.dataLoading.observers.length) {\n      this.mapInstance.on('dataloading', (evt: MapboxGl.EventData) => this.zone.run(() => events.dataLoading.emit(evt)));\n    }\n    if (events.styleDataLoading.observers.length) {\n      this.mapInstance.on('styledataloading', (evt: MapboxGl.EventData) => this.zone.run(() => events.styleDataLoading.emit(evt)));\n    }\n    if (events.sourceDataLoading.observers.length) {\n      this.mapInstance.on('sourcedataloading', (evt: MapboxGl.EventData) => this.zone.run(() => events.sourceDataLoading.emit(evt)));\n    }\n  }\n\n  // TODO move this elsewhere\n  private assign(obj: any, prop: any, value: any) {\n    if (typeof prop === 'string') {\n      // tslint:disable-next-line:no-parameter-reassignment\n      prop = prop.split('.');\n    }\n    if (prop.length > 1) {\n      const e = prop.shift();\n      this.assign(obj[e] =\n        Object.prototype.toString.call(obj[e]) === '[object Object]'\n          ? obj[e]\n          : {},\n        prop,\n        value);\n    } else {\n      obj[prop[0]] = value;\n    }\n  }\n}\n",
    "import { Directive, Host, Input, OnInit } from '@angular/core';\nimport { AttributionControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglAttribution]'\n})\nexport class AttributionControlDirective implements OnInit {\n  /* Init inputs */\n  @Input() compact?: boolean;\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      const options: { compact?: boolean } = {};\n      if (this.compact !== undefined) {\n        options.compact = this.compact;\n      }\n      this.ControlComponent.control = new AttributionControl(options);\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Control, IControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\n\nexport class CustomControl implements IControl {\n  constructor(\n    private container: HTMLElement\n  ) {\n  }\n\n  onAdd() {\n    return this.container;\n  }\n\n  onRemove() {\n    return this.container.parentNode!.removeChild(this.container);\n  }\n\n  getDefaultPosition() {\n    return 'top-right';\n  }\n}\n\n@Component({\n  selector: 'mgl-control',\n  template: '<div class=\"mapboxgl-ctrl\" #content><ng-content></ng-content></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ControlComponent implements OnDestroy, AfterContentInit {\n  /* Init inputs */\n  @Input() position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n  @ViewChild('content') content: ElementRef;\n\n  control: Control | IControl;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngAfterContentInit() {\n    if (this.content.nativeElement.childNodes.length) {\n      this.control = new CustomControl(this.content.nativeElement);\n      this.MapService.mapCreated$.subscribe(() => {\n        this.MapService.addControl(this.control!, this.position);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.MapService.removeControl(this.control);\n  }\n}\n",
    "import { Directive, OnInit, Host } from '@angular/core';\nimport { FullscreenControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglFullscreen]'\n})\nexport class FullscreenControlDirective implements OnInit {\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      this.ControlComponent.control = new FullscreenControl();\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, Host, Input, OnInit } from '@angular/core';\nimport { GeolocateControl, FitBoundsOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglGeolocate]'\n})\nexport class GeolocateControlDirective implements OnInit {\n  /* Init inputs */\n  @Input() positionOptions?: PositionOptions;\n  @Input() fitBoundsOptions?: FitBoundsOptions;\n  @Input() trackUserLocation?: boolean;\n  @Input() showUserLocation?: boolean;\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      const options = {\n        positionOptions: this.positionOptions,\n        fitBoundsOptions: this.fitBoundsOptions,\n        trackUserLocation: this.trackUserLocation,\n        showUserLocation: this.showUserLocation\n      };\n\n      Object.keys(options)\n        .forEach((key: string) => {\n          const tkey = <keyof typeof options>key;\n          if (options[tkey] === undefined) {\n            delete options[tkey];\n          }\n        });\n      this.ControlComponent.control = new GeolocateControl(options);\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, OnInit, Host } from '@angular/core';\nimport { NavigationControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglNavigation]'\n})\nexport class NavigationControlDirective implements OnInit {\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      this.ControlComponent.control = new NavigationControl();\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import { Directive, Host, Input, OnInit } from '@angular/core';\nimport { ScaleControl } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { ControlComponent } from './control.component';\n\n@Directive({\n  selector: '[mglScale]'\n})\nexport class ScaleControlDirective implements OnInit {\n  /* Init inputs */\n  @Input() maxWidth?: number;\n  @Input() unit?: 'imperial' | 'metric' | 'nautical';\n\n  constructor(\n    private MapService: MapService,\n    @Host() private ControlComponent: ControlComponent\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.ControlComponent.control) {\n        throw new Error('Another control is already set for this control');\n      }\n      const options: { maxWidth?: number, unit?: string } = {};\n      if (this.maxWidth !== undefined) {\n        options.maxWidth = this.maxWidth;\n      }\n      if (this.unit !== undefined) {\n        options.unit = this.unit;\n      }\n      this.ControlComponent.control = new ScaleControl(options);\n      this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);\n    });\n  }\n}\n",
    "import {\n  Component,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { MapService } from '../map/map.service';\nimport { MapImageData, MapImageOptions } from '../map/map.types';\n\n@Component({\n  selector: 'mgl-image',\n  template: ''\n})\nexport class ImageComponent implements OnInit, OnDestroy, OnChanges {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() data?: MapImageData;\n  @Input() options?: MapImageOptions;\n  @Input() url?: string;\n\n  @Output() error = new EventEmitter<{ status: number }>();\n  @Output() loaded = new EventEmitter<void>();\n\n  private imageAdded = false;\n\n  constructor(\n    private MapService: MapService,\n    private zone: NgZone\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(async () => {\n      if (this.data) {\n        this.MapService.addImage(\n          this.id,\n          this.data,\n          this.options\n        );\n        this.imageAdded = true;\n      } else if (this.url) {\n        try {\n          await this.MapService.loadAndAddImage(\n            this.id,\n            this.url,\n            this.options\n          );\n          this.imageAdded = true;\n          this.zone.run(() => {\n            this.loaded.emit();\n          });\n        } catch (error) {\n          this.zone.run(() => {\n            this.error.emit(error);\n          });\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      changes.data && !changes.data.isFirstChange() ||\n      changes.options && !changes.options.isFirstChange() ||\n      changes.url && !changes.url.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.imageAdded) {\n      this.MapService.removeImage(this.id);\n    }\n  }\n}\n",
    "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  BackgroundLayout,\n  BackgroundPaint,\n  CircleLayout,\n  CirclePaint,\n  FillExtrusionLayout,\n  FillExtrusionPaint,\n  FillLayout,\n  FillPaint,\n  GeoJSONSource,\n  GeoJSONSourceRaw,\n  ImageSource,\n  Layer,\n  LineLayout,\n  LinePaint,\n  MapMouseEvent,\n  RasterLayout,\n  RasterPaint,\n  RasterSource,\n  SymbolLayout,\n  SymbolPaint,\n  VectorSource,\n  VideoSource\n} from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-layer',\n  template: ''\n})\nexport class LayerComponent implements OnInit, OnDestroy, OnChanges, Layer {\n  /* Init inputs */\n  @Input() id: string;\n  @Input() source?: string | VectorSource | RasterSource | GeoJSONSource | ImageSource | VideoSource | GeoJSONSourceRaw;\n  @Input() type: 'symbol' | 'fill' | 'line' | 'circle' | 'fill-extrusion' | 'raster' | 'background';\n  @Input() metadata?: any;\n  @Input() sourceLayer?: string;\n\n  /* Dynamic inputs */\n  @Input() filter?: any[];\n  @Input() layout?: BackgroundLayout | FillLayout | FillExtrusionLayout | LineLayout | SymbolLayout | RasterLayout | CircleLayout;\n  @Input() paint?: BackgroundPaint | FillPaint | FillExtrusionPaint | LinePaint | SymbolPaint | RasterPaint | CirclePaint;\n  @Input() before?: string;\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n\n  @Output() click = new EventEmitter<MapMouseEvent>();\n  @Output() mouseEnter = new EventEmitter<MapMouseEvent>();\n  @Output() mouseLeave = new EventEmitter<MapMouseEvent>();\n  @Output() mouseMove = new EventEmitter<MapMouseEvent>();\n\n  private layerAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addLayer({\n        layerOptions: {\n          id: this.id,\n          type: this.type,\n          source: this.source,\n          metadata: this.metadata,\n          'source-layer': this.sourceLayer,\n          minzoom: this.minzoom,\n          maxzoom: this.maxzoom,\n          filter: this.filter,\n          layout: this.layout,\n          paint: this.paint\n        },\n        layerEvents: {\n          click: this.click,\n          mouseEnter: this.mouseEnter,\n          mouseLeave: this.mouseLeave,\n          mouseMove: this.mouseMove\n        }\n      }, this.before);\n      this.layerAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.layerAdded) {\n      return;\n    }\n    if (changes.paint && !changes.paint.isFirstChange()) {\n      this.MapService.setAllLayerPaintProperty(this.id, changes.paint.currentValue!);\n    }\n    if (changes.layout && !changes.layout.isFirstChange()) {\n      this.MapService.setAllLayerLayoutProperty(this.id, changes.layout.currentValue!);\n    }\n    if (changes.filter && !changes.filter.isFirstChange()) {\n      this.MapService.setLayerFilter(this.id, changes.filter.currentValue!);\n    }\n    if (changes.before && !changes.before.isFirstChange()) {\n      this.MapService.setLayerBefore(this.id, changes.before.currentValue!);\n    }\n    if (\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.maxzoom && !changes.maxzoom.isFirstChange()\n    ) {\n      this.MapService.setLayerZoomRange(this.id, this.minzoom, this.maxzoom);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.layerAdded) {\n      this.MapService.removeLayer(this.id);\n    }\n  }\n}\n",
    "import {\n  EventData,\n  FlyToOptions,\n  LngLatBoundsLike,\n  LngLatLike,\n  Map,\n  MapBoxZoomEvent,\n  MapMouseEvent,\n  MapTouchEvent,\n  PaddingOptions,\n  PointLike,\n  Style\n} from 'mapbox-gl';\nimport { MapService } from './map.service';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MapEvent } from './map.types';\n\ndeclare global {\n  namespace mapboxgl {\n    export interface MapboxOptions {\n      failIfMajorPerformanceCaveat?: boolean;\n      transformRequest?: Function;\n      localIdeographFontFamily?: string;\n      pitchWithRotate?: boolean;\n    }\n  }\n}\n\n@Component({\n  selector: 'mgl-map',\n  template: '<div #container></div>',\n  styles: [`\n  :host {\n    display: block;\n  }\n  div {\n    height: 100%;\n    width: 100%;\n  }\n  `],\n  providers: [\n    MapService\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MapComponent implements OnChanges, OnDestroy, AfterViewInit, MapEvent {\n  /* Init inputs */\n  @Input() accessToken?: string;\n  @Input() customMapboxApiUrl?: string;\n  @Input() hash?: boolean;\n  @Input() refreshExpiredTiles?: boolean;\n  @Input() failIfMajorPerformanceCaveat?: boolean;\n  @Input() classes?: string[];\n  @Input() bearingSnap?: number;\n  @Input() interactive?: boolean;\n  @Input() pitchWithRotate?: boolean;\n  @Input() attributionControl?: boolean;\n  @Input() logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  @Input() maxTileCacheSize?: number;\n  @Input() localIdeographFontFamily?: string;\n  @Input() preserveDrawingBuffer?: boolean;\n  @Input() renderWorldCopies?: boolean;\n  @Input() trackResize?: boolean;\n  @Input() transformRequest?: Function;\n\n  /* Dynamic inputs */\n  @Input() minZoom?: number;\n  @Input() maxZoom?: number;\n  @Input() scrollZoom?: boolean;\n  @Input() dragRotate?: boolean;\n  @Input() touchZoomRotate?: boolean;\n  @Input() doubleClickZoom?: boolean;\n  @Input() keyboard?: boolean;\n  @Input() dragPan?: boolean;\n  @Input() boxZoom?: boolean;\n  @Input() style: Style | string;\n  @Input() center?: LngLatLike;\n  @Input() maxBounds?: LngLatBoundsLike;\n  @Input() zoom?: [number];\n  @Input() bearing?: [number];\n  @Input() pitch?: [number];\n\n  /* Added by ngx-mapbox-gl */\n  @Input() movingMethod: 'jumpTo' | 'easeTo' | 'flyTo' = 'flyTo';\n  @Input() fitBounds?: LngLatBoundsLike;\n  @Input() fitBoundsOptions?: {\n    linear?: boolean,\n    easing?: Function,\n    padding?: number | PaddingOptions,\n    offset?: PointLike,\n    maxZoom?: number\n  };\n  @Input() flyToOptions?: FlyToOptions;\n  @Input() centerWithPanTo?: boolean;\n  @Input() cursorStyle?: string;\n\n  @Output() resize = new EventEmitter<void>();\n  @Output() remove = new EventEmitter<void>();\n  @Output() mouseDown = new EventEmitter<MapMouseEvent>();\n  @Output() mouseUp = new EventEmitter<MapMouseEvent>();\n  @Output() mouseMove = new EventEmitter<MapMouseEvent>();\n  @Output() click = new EventEmitter<MapMouseEvent>();\n  @Output() dblClick = new EventEmitter<MapMouseEvent>();\n  @Output() mouseEnter = new EventEmitter<MapMouseEvent>();\n  @Output() mouseLeave = new EventEmitter<MapMouseEvent>();\n  @Output() mouseOver = new EventEmitter<MapMouseEvent>();\n  @Output() mouseOut = new EventEmitter<MapMouseEvent>();\n  @Output() contextMenu = new EventEmitter<MapMouseEvent>();\n  @Output() touchStart = new EventEmitter<MapTouchEvent>();\n  @Output() touchEnd = new EventEmitter<MapTouchEvent>();\n  @Output() touchMove = new EventEmitter<MapTouchEvent>();\n  @Output() touchCancel = new EventEmitter<MapTouchEvent>();\n  @Output() moveStart = new EventEmitter<DragEvent>(); // TODO Check type\n  @Output() move = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() moveEnd = new EventEmitter<DragEvent>();\n  @Output() dragStart = new EventEmitter<DragEvent>();\n  @Output() drag = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() dragEnd = new EventEmitter<DragEvent>();\n  @Output() zoomStart = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() zoomEvt = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() zoomEnd = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() rotateStart = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() rotate = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() rotateEnd = new EventEmitter<MapTouchEvent | MapMouseEvent>();\n  @Output() pitchStart = new EventEmitter<EventData>();\n  @Output() pitchEvt = new EventEmitter<EventData>();\n  @Output() pitchEnd = new EventEmitter<EventData>();\n  @Output() boxZoomStart = new EventEmitter<MapBoxZoomEvent>();\n  @Output() boxZoomEnd = new EventEmitter<MapBoxZoomEvent>();\n  @Output() boxZoomCancel = new EventEmitter<MapBoxZoomEvent>();\n  @Output() webGlContextLost = new EventEmitter<void>();\n  @Output() webGlContextRestored = new EventEmitter<void>();\n  @Output() load = new EventEmitter<any>();\n  @Output() render = new EventEmitter<void>();\n  @Output() error = new EventEmitter<any>(); // TODO Check type\n  @Output() data = new EventEmitter<EventData>();\n  @Output() styleData = new EventEmitter<EventData>();\n  @Output() sourceData = new EventEmitter<EventData>();\n  @Output() dataLoading = new EventEmitter<EventData>();\n  @Output() styleDataLoading = new EventEmitter<EventData>();\n  @Output() sourceDataLoading = new EventEmitter<EventData>();\n\n  get mapInstance(): Map {\n    return this.MapService.mapInstance;\n  }\n\n  @ViewChild('container') mapContainer: ElementRef;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngAfterViewInit() {\n    this.MapService.setup({\n      accessToken: this.accessToken,\n      customMapboxApiUrl: this.customMapboxApiUrl,\n      mapOptions: {\n        container: this.mapContainer.nativeElement,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        style: this.style,\n        hash: this.hash,\n        interactive: this.interactive,\n        bearingSnap: this.bearingSnap,\n        pitchWithRotate: this.pitchWithRotate,\n        classes: this.classes,\n        attributionControl: this.attributionControl,\n        logoPosition: this.logoPosition,\n        failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,\n        preserveDrawingBuffer: this.preserveDrawingBuffer,\n        refreshExpiredTiles: this.refreshExpiredTiles,\n        maxBounds: this.maxBounds,\n        scrollZoom: this.scrollZoom,\n        boxZoom: this.boxZoom,\n        dragRotate: this.dragRotate,\n        dragPan: this.dragPan,\n        keyboard: this.keyboard,\n        doubleClickZoom: this.doubleClickZoom,\n        touchZoomRotate: this.touchZoomRotate,\n        trackResize: this.trackResize,\n        center: this.center,\n        zoom: this.zoom,\n        bearing: this.bearing,\n        pitch: this.pitch,\n        renderWorldCopies: this.renderWorldCopies,\n        maxTileCacheSize: this.maxTileCacheSize,\n        localIdeographFontFamily: this.localIdeographFontFamily,\n        transformRequest: this.transformRequest\n      },\n      mapEvents: this\n    });\n    if (this.cursorStyle) {\n      this.MapService.changeCanvasCursor(this.cursorStyle);\n    }\n  }\n\n  ngOnDestroy() {\n    this.MapService.destroyMap();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.cursorStyle && !changes.cursorStyle.isFirstChange()) {\n      this.MapService.changeCanvasCursor(changes.cursorStyle.currentValue);\n    }\n    if (changes.minZoom && !changes.minZoom.isFirstChange()) {\n      this.MapService.updateMinZoom(changes.minZoom.currentValue);\n    }\n    if (changes.maxZoom && !changes.maxZoom.isFirstChange()) {\n      this.MapService.updateMaxZoom(changes.maxZoom.currentValue);\n    }\n    if (changes.scrollZoom && !changes.scrollZoom.isFirstChange()) {\n      this.MapService.updateScrollZoom(changes.scrollZoom.currentValue);\n    }\n    if (changes.dragRotate && !changes.dragRotate.isFirstChange()) {\n      this.MapService.updateDragRotate(changes.dragRotate.currentValue);\n    }\n    if (changes.touchZoomRotate && !changes.touchZoomRotate.isFirstChange()) {\n      this.MapService.updateTouchZoomRotate(changes.touchZoomRotate.currentValue);\n    }\n    if (changes.doubleClickZoom && !changes.doubleClickZoom.isFirstChange()) {\n      this.MapService.updateDoubleClickZoom(changes.doubleClickZoom.currentValue);\n    }\n    if (changes.keyboard && !changes.keyboard.isFirstChange()) {\n      this.MapService.updateKeyboard(changes.keyboard.currentValue);\n    }\n    if (changes.dragPan && !changes.dragPan.isFirstChange()) {\n      this.MapService.updateDragPan(changes.dragPan.currentValue);\n    }\n    if (changes.boxZoom && !changes.boxZoom.isFirstChange()) {\n      this.MapService.updateBoxZoom(changes.boxZoom.currentValue);\n    }\n    if (changes.style && !changes.style.isFirstChange()) {\n      this.MapService.updateStyle(changes.style.currentValue);\n    }\n    if (changes.maxBounds && !changes.maxBounds.isFirstChange()) {\n      this.MapService.updateMaxBounds(changes.maxBounds.currentValue);\n    }\n    if (changes.fitBounds && !changes.fitBounds.isFirstChange()) {\n      this.MapService.fitBounds(changes.fitBounds.currentValue, this.fitBoundsOptions);\n    }\n    if (\n      this.centerWithPanTo &&\n      changes.center && !changes.center.isFirstChange() &&\n      !changes.zoom && !changes.bearing && !changes.pitch\n    ) {\n      this.MapService.panTo(this.center!);\n    } else if (\n      changes.center && !changes.center.isFirstChange() ||\n      changes.zoom && !changes.zoom.isFirstChange() ||\n      changes.bearing && !changes.bearing.isFirstChange() ||\n      changes.pitch && !changes.pitch.isFirstChange()\n    ) {\n      this.MapService.move(\n        this.movingMethod,\n        this.flyToOptions,\n        changes.zoom && this.zoom ? this.zoom[0] : undefined,\n        changes.center ? this.center : undefined,\n        changes.bearing && this.bearing ? this.bearing[0] : undefined,\n        changes.pitch && this.pitch ? this.pitch[0] : undefined\n      );\n    }\n  }\n}\n",
    "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef\n} from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { startWith } from 'rxjs/operators/startWith';\nimport { Subscription } from 'rxjs/Subscription';\nimport supercluster, { Options as SuperclusterOptions, Supercluster } from 'supercluster';\nimport { MapService } from '../map/map.service';\n\n@Directive({ selector: 'ng-template[mglPoint]' })\nexport class PointDirective { }\n\n@Directive({ selector: 'ng-template[mglClusterPoint]' })\nexport class ClusterPointDirective { }\n\n@Component({\n  selector: 'mgl-marker-cluster',\n  template: `\n    <ng-container *ngFor=\"let feature of clusterPoints\">\n      <ng-container *ngIf=\"feature.properties.cluster; else point\">\n        <mgl-marker\n          [feature]=\"feature\"\n        >\n          <ng-container *ngTemplateOutlet=\"clusterPointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-container>\n      <ng-template #point>\n        <mgl-marker\n          [feature]=\"feature\"\n        >\n          <ng-container *ngTemplateOutlet=\"pointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-template>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MarkerClusterComponent implements OnChanges, OnDestroy, AfterContentInit, OnInit {\n  /* Init input */\n  @Input() radius?: number;\n  @Input() maxZoom?: number;\n  @Input() minZoom?: number;\n  @Input() extent?: number;\n  @Input() nodeSize?: number;\n  @Input() log?: boolean;\n  @Input() reduce?: (accumulated: any, props: any) => void;\n  @Input() initial?: () => any;\n  @Input() map?: (props: any) => any;\n\n  /* Dynamic input */\n  @Input() data: GeoJSON.FeatureCollection<GeoJSON.Point>;\n\n  @ContentChild(PointDirective, { read: TemplateRef }) pointTpl: TemplateRef<any>;\n  @ContentChild(ClusterPointDirective, { read: TemplateRef }) clusterPointTpl: TemplateRef<any>;\n\n  clusterPoints: GeoJSON.Feature<GeoJSON.Point>[];\n\n  private supercluster: Supercluster;\n  private sub = new Subscription();\n\n  constructor(\n    private MapService: MapService,\n    private ChangeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  ngOnInit() {\n    const options: SuperclusterOptions = {\n      radius: this.radius,\n      maxZoom: this.maxZoom,\n      minZoom: this.minZoom,\n      extent: this.extent,\n      nodeSize: this.nodeSize,\n      log: this.log,\n      reduce: this.reduce,\n      initial: this.initial,\n      map: this.map\n    };\n    Object.keys(options)\n      .forEach((key: string) => {\n        const tkey = <keyof SuperclusterOptions>key;\n        if (options[tkey] === undefined) {\n          delete options[tkey];\n        }\n      });\n    this.supercluster = supercluster(options);\n    this.supercluster.load(this.data.features);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.data && !changes.data.isFirstChange()) {\n      this.supercluster.load(this.data.features);\n    }\n  }\n\n  ngAfterContentInit() {\n    this.MapService.mapCreated$.subscribe(() => {\n      const mapMove$ = merge(\n        fromEvent(this.MapService.mapInstance, 'zoomChange'),\n        fromEvent(this.MapService.mapInstance, 'move')\n      );\n      const sub = mapMove$.pipe(\n        startWith<any>(undefined)\n      ).subscribe(() => this.updateCluster());\n      this.sub.add(sub);\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  private updateCluster() {\n    const bbox = this.MapService.getCurrentViewportBbox();\n    const currentZoom = Math.round(this.MapService.mapInstance.getZoom());\n    this.clusterPoints = this.supercluster.getClusters(bbox, currentZoom);\n    this.ChangeDetectorRef.detectChanges();\n    this.MapService.applyChanges();\n  }\n}\n",
    "import { LngLatLike, Marker, PointLike } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewChild,\n    AfterViewInit,\n    OnInit,\n    ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'mgl-marker',\n  template: '<div #content><ng-content></ng-content></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarkerComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {\n  /* Init input */\n  @Input() offset?: PointLike;\n\n  /* Dynamic input */\n  @Input() feature?: GeoJSON.Feature<GeoJSON.Point>;\n  @Input() lngLat?: LngLatLike;\n\n  @ViewChild('content') content: ElementRef;\n\n  markerInstance?: Marker;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    if (this.feature && this.lngLat) {\n      throw new Error('feature and lngLat input are mutually exclusive');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.lngLat && !changes.lngLat.isFirstChange()) {\n      this.markerInstance!.setLngLat(this.lngLat!);\n    }\n    if (changes.feature && !changes.feature.isFirstChange()) {\n      this.markerInstance!.setLngLat(this.feature!.geometry!.coordinates);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.markerInstance = new Marker(this.content.nativeElement, { offset: this.offset });\n    this.markerInstance.setLngLat(this.feature ? this.feature.geometry!.coordinates : this.lngLat!);\n    this.MapService.mapCreated$.subscribe(() => {\n      this.MapService.addMarker(this.markerInstance!);\n    });\n  }\n\n  ngOnDestroy() {\n    this.MapService.removeMarker(this.markerInstance!);\n    this.markerInstance = undefined;\n  }\n\n  togglePopup() {\n    this.markerInstance!.togglePopup();\n  }\n}\n",
    "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n  EventEmitter,\n  Output\n} from '@angular/core';\nimport { PointLike, Popup, LngLatLike } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\nimport { MarkerComponent } from '../marker/marker.component';\n\n@Component({\n  selector: 'mgl-popup',\n  template: '<div #content><ng-content></ng-content></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopupComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {\n  /* Init input */\n  @Input() closeButton?: boolean;\n  @Input() closeOnClick?: boolean;\n  @Input() anchor?: 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left';\n  @Input() offset?: number | PointLike | { [anchor: string]: [number, number] };\n\n  /* Dynamic input */\n  @Input() lngLat?: LngLatLike;\n  @Input() marker?: MarkerComponent;\n\n  @Output() close = new EventEmitter<void>();\n\n  @ViewChild('content') content: ElementRef;\n\n  popupInstance?: Popup;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    if (this.lngLat && this.marker) {\n      throw new Error('marker and lngLat input are mutually exclusive');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.lngLat && !changes.lngLat.isFirstChange()) {\n      this.MapService.removePopup(this.popupInstance!);\n      const popupInstanceTmp = this.createPopup();\n      this.MapService.addPopup(popupInstanceTmp);\n      this.popupInstance = popupInstanceTmp;\n    }\n    if (changes.marker && !changes.marker.isFirstChange()) {\n      const previousMarker: MarkerComponent = changes.marker.previousValue;\n      if (previousMarker.markerInstance) {\n        previousMarker.markerInstance.setPopup(undefined);\n      }\n      if (this.marker && this.marker.markerInstance) {\n        this.marker.markerInstance.setPopup(this.popupInstance);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this.popupInstance = this.createPopup();\n  }\n\n  ngOnDestroy() {\n    this.MapService.removePopup(this.popupInstance!);\n    this.popupInstance = undefined;\n  }\n\n  private createPopup() {\n    const options = {\n      closeButton: this.closeButton,\n      closeOnClick: this.closeOnClick,\n      anchor: this.anchor,\n      offset: this.offset\n    };\n    Object.keys(options)\n      .forEach((key) =>\n        (<any>options)[key] === undefined && delete (<any>options)[key]);\n    const popupInstance = new Popup(options);\n    popupInstance.once('close', () => {\n      this.close.emit();\n    });\n    popupInstance.setDOMContent(this.content.nativeElement);\n    this.MapService.mapCreated$.subscribe(() => {\n      if (this.lngLat) {\n        popupInstance.setLngLat(this.lngLat);\n        this.MapService.addPopup(popupInstance);\n      } else if (this.marker && this.marker.markerInstance) {\n        this.marker.markerInstance.setPopup(popupInstance);\n      }\n    });\n    return popupInstance;\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { CanvasSourceOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-canvas-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CanvasSourceComponent implements OnInit, OnDestroy, OnChanges, CanvasSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() coordinates: number[][];\n  @Input() canvas: string;\n  @Input() animate?: boolean;\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      const source = {\n        type: 'canvas',\n        coordinates: this.coordinates,\n        canvas: this.canvas,\n        animate: this.animate,\n      };\n      this.MapService.addSource(this.id, source);\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.coordinates && !changes.coordinates.isFirstChange() ||\n      changes.canvas && !changes.canvas.isFirstChange() ||\n      changes.animate && !changes.animate.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { GeoJSONSource, GeoJSONSourceOptions, GeoJSONGeometry } from 'mapbox-gl';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MapService } from '../../map/map.service';\n\n@Component({\n  selector: 'mgl-geojson-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeoJSONSourceComponent implements OnInit, OnDestroy, OnChanges, GeoJSONSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() data?: GeoJSON.Feature<GeoJSONGeometry> | GeoJSON.FeatureCollection<GeoJSONGeometry> | string;\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n  @Input() buffer?: number;\n  @Input() tolerance?: number;\n  @Input() cluster?: boolean;\n  @Input() clusterRadius?: number;\n  @Input() clusterMaxZoom?: number;\n\n  updateFeatureData = new Subject();\n\n  private sub: Subscription;\n  private sourceAdded = false;\n  private featureIdCounter = 0;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    if (!this.data) {\n      this.data = {\n        type: 'FeatureCollection',\n        features: []\n      };\n    }\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: 'geojson',\n        data: this.data,\n        maxzoom: this.maxzoom,\n        minzoom: this.minzoom,\n        buffer: this.buffer,\n        tolerance: this.tolerance,\n        cluster: this.cluster,\n        clusterRadius: this.clusterRadius,\n        clusterMaxZoom: this.clusterMaxZoom,\n      });\n      this.sub = this.updateFeatureData.pipe(\n        debounceTime(0)\n      ).subscribe(() => {\n        const source = this.MapService.getSource<GeoJSONSource>(this.id);\n        source.setData(this.data!);\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.maxzoom && !changes.maxzoom.isFirstChange() ||\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.buffer && !changes.buffer.isFirstChange() ||\n      changes.tolerance && !changes.tolerance.isFirstChange() ||\n      changes.cluster && !changes.cluster.isFirstChange() ||\n      changes.clusterRadius && !changes.clusterRadius.isFirstChange() ||\n      changes.clusterMaxZoom && !changes.clusterMaxZoom.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n    if (changes.data && !changes.data.isFirstChange()) {\n      const source = this.MapService.getSource<GeoJSONSource>(this.id);\n      source.setData(this.data!);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.sub.unsubscribe();\n      this.MapService.removeSource(this.id);\n    }\n  }\n\n  addFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>) {\n    const collection = <GeoJSON.FeatureCollection<GeoJSON.GeometryObject>>this.data;\n    collection.features.push(feature);\n    this.updateFeatureData.next();\n  }\n\n  removeFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>) {\n    const collection = <GeoJSON.FeatureCollection<GeoJSON.GeometryObject>>this.data;\n    const index = collection.features.indexOf(feature);\n    if (index > -1) {\n      collection.features.splice(index, 1);\n    }\n    this.updateFeatureData.next();\n  }\n\n  getNewFeatureId() {\n    return ++this.featureIdCounter;\n  }\n}\n",
    "import { Component, forwardRef, Inject, Input, OnDestroy, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { GeoJSONSourceComponent } from './geojson-source.component';\n\n@Component({\n  selector: 'mgl-feature',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FeatureComponent implements OnInit, OnDestroy, GeoJSON.Feature<GeoJSON.GeometryObject> {\n  /* Init inputs */\n  @Input() id?: number; // FIXME number only for now https://github.com/mapbox/mapbox-gl-js/issues/2716\n  @Input() geometry: GeoJSON.GeometryObject;\n  @Input() properties: any;\n  type: 'Feature' = 'Feature';\n\n  private feature: GeoJSON.Feature<GeoJSON.GeometryObject>;\n\n  constructor(\n    @Inject(forwardRef(() => GeoJSONSourceComponent)) private GeoJSONSourceComponent: GeoJSONSourceComponent\n  ) { }\n\n  ngOnInit() {\n    if (!this.id) {\n      this.id = this.GeoJSONSourceComponent.getNewFeatureId();\n    }\n    this.feature = {\n      type: this.type,\n      geometry: this.geometry,\n      properties: this.properties ? this.properties : {}\n    };\n    this.feature.id = this.id;\n    this.GeoJSONSourceComponent.addFeature(this.feature);\n  }\n\n  ngOnDestroy() {\n    this.GeoJSONSourceComponent.removeFeature(this.feature);\n  }\n\n  updateCoordinates(coordinates: number[]) {\n    (<GeoJSON.Point>this.feature.geometry).coordinates = coordinates;\n    this.GeoJSONSourceComponent.updateFeatureData.next();\n  }\n}\n",
    "import { Directive, Host, Input, OnDestroy, OnInit, EventEmitter, Output, NgZone } from '@angular/core';\nimport { MapMouseEvent } from 'mapbox-gl';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { LayerComponent } from '../../layer/layer.component';\nimport { MapService } from '../../map/map.service';\nimport { FeatureComponent } from './feature.component';\n\n@Directive({\n  selector: '[mglDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('mglDraggable') source: LayerComponent;\n\n  @Output() dragStart = new EventEmitter<MapMouseEvent>();\n  @Output() dragEnd = new EventEmitter<MapMouseEvent>();\n  @Output() drag = new EventEmitter<MapMouseEvent>();\n\n  private destroyed$: ReplaySubject<void> = new ReplaySubject(1);\n\n  constructor(\n    private MapService: MapService,\n    @Host() private FeatureComponent: FeatureComponent,\n    private NgZone: NgZone\n  ) { }\n\n  ngOnInit() {\n    if (this.FeatureComponent.geometry.type !== 'Point') {\n      throw new Error('mglDraggable only support point feature');\n    }\n    this.MapService.mapCreated$.subscribe(() => {\n      this.source.mouseEnter.pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe((evt) => {\n        const feature: GeoJSON.Feature<any> = this.MapService.queryRenderedFeatures(\n          evt.point,\n          {\n            layers: [this.source.id],\n            filter: [\n              'all',\n              ['==', '$type', 'Point'],\n              ['==', '$id', this.FeatureComponent.id]\n            ]\n          }\n        )[0];\n        if (!feature) {\n          return;\n        }\n        this.MapService.changeCanvasCursor('move');\n        this.MapService.updateDragPan(false);\n\n        fromEvent(this.MapService.mapInstance, 'mousedown').pipe(\n          takeUntil(merge(this.destroyed$, this.source.mouseLeave))\n        ).subscribe(() => {\n          if (this.dragStart.observers.length) {\n            this.NgZone.run(() => this.dragStart.emit(evt));\n          }\n          fromEvent<MapMouseEvent>(this.MapService.mapInstance, 'mousemove').pipe(\n            takeUntil(merge(this.destroyed$, fromEvent(this.MapService.mapInstance, 'mouseup')))\n          ).subscribe(\n            (evt) => {\n              if (this.drag.observers.length) {\n                this.NgZone.run(() => this.drag.emit(evt));\n              }\n              this.FeatureComponent.updateCoordinates([evt.lngLat.lng, evt.lngLat.lat]);\n            },\n            (err) => err,\n            () => {\n              if (this.dragEnd.observers.length) {\n                this.NgZone.run(() => this.dragEnd.emit(evt));\n              }\n            }\n          );\n        });\n      });\n      this.source.mouseLeave.pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe(() => {\n        this.MapService.changeCanvasCursor('');\n        this.MapService.updateDragPan(true);\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(undefined);\n    this.destroyed$.complete();\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ImageSourceOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-image-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ImageSourceComponent implements OnInit, OnDestroy, OnChanges, ImageSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() url: string;\n  @Input() coordinates: number[][];\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: 'image',\n        url: this.url,\n        coordinates: this.coordinates\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.url && !changes.url.isFirstChange() ||\n      changes.coordinates && !changes.coordinates.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { RasterSource } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-raster-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RasterSourceComponent implements OnInit, OnDestroy, OnChanges, RasterSource {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() url: string;\n  @Input() tiles?: string[];\n  @Input() bounds?: number[];\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n  @Input() tileSize?: number;\n\n  type: 'raster' = 'raster'; // Just to make ts happy\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      const source = {\n        type: this.type,\n        url: this.url,\n        tiles: this.tiles,\n        bounds: this.bounds,\n        minzoom: this.minzoom,\n        maxzoom: this.maxzoom,\n        tileSize: this.tileSize\n      };\n      this.MapService.addSource(this.id, source);\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.url && !changes.url.isFirstChange() ||\n      changes.tiles && !changes.tiles.isFirstChange() ||\n      changes.bounds && !changes.bounds.isFirstChange() ||\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.maxzoom && !changes.maxzoom.isFirstChange() ||\n      changes.tileSize && !changes.tileSize.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { VectorSource } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-vector-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VectorSourceComponent implements OnInit, OnDestroy, OnChanges, VectorSource {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() url?: string;\n  @Input() tiles?: string[];\n  @Input() minzoom?: number;\n  @Input() maxzoom?: number;\n\n  type: 'vector' = 'vector'; // Just to make ts happy\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: this.type,\n        url: this.url,\n        tiles: this.tiles,\n        minzoom: this.minzoom,\n        maxzoom: this.maxzoom,\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.url && !changes.url.isFirstChange() ||\n      changes.tiles && !changes.tiles.isFirstChange() ||\n      changes.minzoom && !changes.minzoom.isFirstChange() ||\n      changes.maxzoom && !changes.maxzoom.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { VideoSourceOptions } from 'mapbox-gl';\nimport { MapService } from '../map/map.service';\n\n@Component({\n  selector: 'mgl-video-source',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoSourceComponent implements OnInit, OnDestroy, OnChanges, VideoSourceOptions {\n  /* Init inputs */\n  @Input() id: string;\n\n  /* Dynamic inputs */\n  @Input() urls: string[];\n  @Input() coordinates: number[][];\n\n  private sourceAdded = false;\n\n  constructor(\n    private MapService: MapService\n  ) { }\n\n  ngOnInit() {\n    this.MapService.mapLoaded$.subscribe(() => {\n      this.MapService.addSource(this.id, {\n        type: 'video',\n        urls: this.urls,\n        coordinates: this.coordinates\n      });\n      this.sourceAdded = true;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.sourceAdded) {\n      return;\n    }\n    if (\n      changes.urls && !changes.urls.isFirstChange() ||\n      changes.coordinates && !changes.coordinates.isFirstChange()\n    ) {\n      this.ngOnDestroy();\n      this.ngOnInit();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sourceAdded) {\n      this.MapService.removeSource(this.id);\n    }\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { AttributionControlDirective } from './control/attribution-control.directive';\nimport { ControlComponent } from './control/control.component';\nimport { FullscreenControlDirective } from './control/fullscreen-control.directive';\nimport { GeolocateControlDirective } from './control/geolocate-control.directive';\nimport { NavigationControlDirective } from './control/navigation-control.directive';\nimport { ScaleControlDirective } from './control/scale-control.directive';\nimport { ImageComponent } from './image/image.component';\nimport { LayerComponent } from './layer/layer.component';\nimport { MapComponent } from './map/map.component';\nimport { MAPBOX_API_KEY } from './map/map.service';\nimport { MarkerClusterComponent, ClusterPointDirective, PointDirective } from './marker-cluster/marker-cluster.component';\nimport { MarkerComponent } from './marker/marker.component';\nimport { PopupComponent } from './popup/popup.component';\nimport { CanvasSourceComponent } from './source/canvas-source.component';\nimport { DraggableDirective } from './source/geojson/draggable.directive';\nimport { FeatureComponent } from './source/geojson/feature.component';\nimport { GeoJSONSourceComponent } from './source/geojson/geojson-source.component';\nimport { ImageSourceComponent } from './source/image-source.component';\nimport { RasterSourceComponent } from './source/raster-source.component';\nimport { VectorSourceComponent } from './source/vector-source.component';\nimport { VideoSourceComponent } from './source/video-source.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    MapComponent,\n    LayerComponent,\n    DraggableDirective,\n    ImageComponent,\n    VectorSourceComponent,\n    GeoJSONSourceComponent,\n    RasterSourceComponent,\n    ImageSourceComponent,\n    VideoSourceComponent,\n    CanvasSourceComponent,\n    FeatureComponent,\n    MarkerComponent,\n    PopupComponent,\n    ControlComponent,\n    FullscreenControlDirective,\n    NavigationControlDirective,\n    GeolocateControlDirective,\n    AttributionControlDirective,\n    ScaleControlDirective,\n    PointDirective,\n    ClusterPointDirective,\n    MarkerClusterComponent\n  ],\n  exports: [\n    MapComponent,\n    LayerComponent,\n    DraggableDirective,\n    ImageComponent,\n    VectorSourceComponent,\n    GeoJSONSourceComponent,\n    RasterSourceComponent,\n    ImageSourceComponent,\n    VideoSourceComponent,\n    CanvasSourceComponent,\n    FeatureComponent,\n    MarkerComponent,\n    PopupComponent,\n    ControlComponent,\n    FullscreenControlDirective,\n    NavigationControlDirective,\n    GeolocateControlDirective,\n    AttributionControlDirective,\n    ScaleControlDirective,\n    PointDirective,\n    ClusterPointDirective,\n    MarkerClusterComponent\n  ]\n})\nexport class NgxMapboxGLModule {\n  static forRoot(config: { accessToken: string }): ModuleWithProviders {\n    return {\n      ngModule: NgxMapboxGLModule,\n      providers: [\n        {\n          provide: MAPBOX_API_KEY,\n          useValue: config.accessToken\n        }\n      ],\n    };\n  }\n}\n"
  ],
  "names": [
    "e",
    "op",
    "y",
    "f",
    "t",
    "o",
    "i",
    "length",
    "MAPBOX_API_KEY",
    "InjectionToken",
    "MapService",
    "this",
    "mapCreated",
    "AsyncSubject$1",
    "mapLoaded",
    "layerIdsToRemove",
    "subscription",
    "Subscription$1",
    "mapCreated$",
    "asObservable",
    "mapLoaded$",
    "_this",
    "zone",
    "onStable",
    "pipe",
    "first$1",
    "subscribe",
    "assign",
    "MapboxGl",
    "options",
    "accessToken",
    "hookEvents",
    "mapEvents",
    "next",
    "undefined",
    "complete",
    "prototype",
    "destroyMap",
    "unsubscribe",
    "mapInstance",
    "remove",
    "runOutsideAngular",
    "setMinZoom",
    "minZoom",
    "updateMaxZoom",
    "maxZoom",
    "setMaxZoom",
    "updateScrollZoom",
    "status",
    "scrollZoom",
    "enable",
    "disable",
    "updateDragRotate",
    "updateTouchZoomRotate",
    "updateDoubleClickZoom",
    "updateKeyboard",
    "boxZoom",
    "changeCanvasCursor",
    "cursor",
    "getCanvasContainer",
    "style",
    "queryRenderedFeatures",
    "pointOrBox",
    "parameters",
    "panTo",
    "center",
    "move",
    "movingMethod",
    "flyToOptions",
    "zoom",
    "bearing",
    "pitch",
    "Object",
    "keys",
    "layer",
    "layerOptions",
    "forEach",
    "key",
    "tkey",
    "on",
    "id",
    "evt",
    "run",
    "layerEvents",
    "click",
    "emit",
    "mouseEnter",
    "mouseLeave",
    "removeLayer",
    "layerId",
    "push",
    "removeMarker",
    "marker",
    "markersToRemove",
    "addPopup",
    "popup",
    "removePopup",
    "popupsToRemove",
    "addControl",
    "control",
    "position",
    "removeControl",
    "loadAndAddImage",
    "imageId",
    "url",
    "Promise",
    "resolve",
    "reject",
    "loadImage",
    "error",
    "image",
    "addImage",
    "addSource",
    "sourceId",
    "source",
    "removeSource",
    "sourceIdsToRemove",
    "setAllLayerPaintProperty",
    "paint",
    "setAllLayerLayoutProperty",
    "layout",
    "setLayerFilter",
    "filter",
    "setLayerBefore",
    "beforeId",
    "moveLayer",
    "setLayerZoomRange",
    "fitBounds",
    "bounds",
    "canvas",
    "getCanvas",
    "w",
    "width",
    "h",
    "height",
    "upLeft",
    "unproject",
    "toArray",
    "upRight",
    "applyChanges",
    "removePopups",
    "removeImages",
    "NgZone",
    "assertNotInAngularZone",
    "Map",
    "sub",
    "onMicrotaskEmpty",
    "add",
    "removeLayers",
    "_a",
    "__values",
    "_b",
    "done",
    "value",
    "off",
    "e_1_1",
    "e_1",
    "_c",
    "return",
    "call",
    "removeSources",
    "e_2_1",
    "e_2",
    "removeMarkers",
    "e_3_1",
    "e_3",
    "e_4_1",
    "e_4",
    "imageIdsToRemove",
    "removeImage",
    "e_5_1",
    "e_5",
    "events",
    "load",
    "resize",
    "observers",
    "mouseDown",
    "mouseUp",
    "dblClick",
    "mouseOver",
    "mouseOut",
    "touchEnd",
    "dragStart",
    "dragEnd",
    "zoomEvt",
    "zoomEnd",
    "rotate",
    "pitchStart",
    "pitchEvt",
    "pitchEnd",
    "boxZoomStart",
    "boxZoomEnd",
    "boxZoomCancel",
    "webGlContextLost",
    "styleData",
    "dataLoading",
    "ControlComponent",
    "styleDataLoading",
    "sourceDataLoading",
    "obj",
    "prop",
    "split",
    "shift",
    "toString",
    "type",
    "CustomControl",
    "container",
    "onAdd",
    "onRemove",
    "removeChild",
    "getDefaultPosition",
    "ngAfterContentInit",
    "ngOnDestroy",
    "decorators",
    "Component",
    "args",
    "selector",
    "template",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "ctorParameters",
    "Input",
    "content",
    "ViewChild",
    "AttributionControlDirective",
    "MapService$$1",
    "ControlComponent$$1",
    "compact",
    "Directive",
    "Host",
    "propDecorators",
    "FullscreenControlDirective",
    "ngOnInit",
    "FullscreenControl",
    "fitBoundsOptions",
    "trackUserLocation",
    "showUserLocation",
    "GeolocateControl",
    "GeolocateControlDirective",
    "positionOptions",
    "NavigationControlDirective",
    "NavigationControl",
    "ScaleControlDirective",
    "maxWidth",
    "unit",
    "ScaleControl",
    "ImageComponent",
    "EventEmitter",
    "loaded",
    "imageAdded",
    "__awaiter",
    "label",
    "data",
    "trys",
    "error_1",
    "sent",
    "Output",
    "LayerComponent",
    "mouseMove",
    "layerAdded",
    "maxzoom",
    "before",
    "ngOnChanges",
    "changes",
    "isFirstChange",
    "minzoom",
    "metadata",
    "sourceLayer",
    "MapComponent",
    "contextMenu",
    "touchStart",
    "touchMove",
    "moveEnd",
    "drag",
    "render",
    "sourceData",
    "defineProperty",
    "get",
    "enumerable",
    "configurable",
    "ngAfterViewInit",
    "setup",
    "customMapboxApiUrl",
    "mapOptions",
    "mapContainer",
    "nativeElement",
    "hash",
    "interactive",
    "bearingSnap",
    "pitchWithRotate",
    "classes",
    "attributionControl",
    "logoPosition",
    "failIfMajorPerformanceCaveat",
    "preserveDrawingBuffer",
    "refreshExpiredTiles",
    "maxBounds",
    "dragRotate",
    "dragPan",
    "keyboard",
    "doubleClickZoom",
    "touchZoomRotate",
    "trackResize",
    "renderWorldCopies",
    "maxTileCacheSize",
    "localIdeographFontFamily",
    "transformRequest",
    "cursorStyle",
    "currentValue",
    "updateMinZoom",
    "updateStyle",
    "ChangeDetectorRef",
    "centerWithPanTo",
    "styles",
    "providers",
    "moveStart",
    "rotateEnd",
    "webGlContextRestored",
    "PointDirective",
    "ClusterPointDirective",
    "MarkerClusterComponent",
    "ChangeDetectorRef$$1",
    "radius",
    "reduce",
    "initial",
    "map",
    "startWith$1",
    "updateCluster",
    "clusterPoints",
    "supercluster",
    "getClusters",
    "bbox$$1",
    "currentZoom",
    "detectChanges",
    "preserveWhitespaces",
    "MarkerComponent",
    "feature",
    "lngLat",
    "Error",
    "setLngLat",
    "coordinates",
    "addMarker",
    "togglePopup",
    "offset",
    "PopupComponent",
    "close",
    "popupInstanceTmp",
    "createPopup",
    "popupInstance",
    "previousMarker",
    "markerInstance",
    "setPopup",
    "closeButton",
    "closeOnClick",
    "anchor",
    "Popup",
    "once",
    "setDOMContent",
    "CanvasSourceComponent",
    "sourceAdded",
    "GeoJSONSourceComponent",
    "updateFeatureData",
    "Subject$1",
    "featureIdCounter",
    "buffer",
    "tolerance",
    "cluster",
    "debounceTime$1",
    "getSource",
    "setData",
    "addFeature",
    "features",
    "removeFeature",
    "collection",
    "index",
    "indexOf",
    "fromEvent",
    "splice",
    "getNewFeatureId",
    "clusterRadius",
    "clusterMaxZoom",
    "FeatureComponent",
    "GeoJSONSourceComponent$$1",
    "properties",
    "updateCoordinates",
    "Inject",
    "forwardRef",
    "geometry",
    "DraggableDirective",
    "FeatureComponent$$1",
    "destroyed$",
    "ReplaySubject$1",
    "takeUntil$1",
    "point",
    "layers",
    "updateDragPan",
    "fromEvent$1",
    "merge$1",
    "lng",
    "lat",
    "ImageSourceComponent",
    "RasterSourceComponent",
    "tileSize",
    "VectorSourceComponent",
    "tiles"
  ],
  "mappings": "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"
}
